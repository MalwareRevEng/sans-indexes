\comment{********************************************************************************************
                                       CATEGORIES SECTION
*****************************************************************************************************
 Sort entries consist of a number to be inserted in the standard 'Numbers' section
 Number composition : [(1) Alphabet order number] [(2) 0]
   (1) Sorting in alphabetical number
   (2) Allows up to 10 subsections / alphabet character }

% \indexentry{1A@\textbf{Ransomware}!1@Locky|book{1}}{31}
% \indexentry{1Z@\blankline|comment}{0}

\indexentry{1A@\textbf{Function}!1@PINK TAGS|book{1}}{1}
\indexentry{1A@\textbf{Function}!1@ReadFile|book{1}}{91}
\indexentry{1A@\textbf{Function}!1@CryptEncrypt|book{1}}{97}
\indexentry{1A@\textbf{Function}!1@CryptDecrypt|book{1}}{99}
\indexentry{1A@\textbf{Function}!1@RegOpenKey|book{2}}{18}
\indexentry{1A@\textbf{Function}!1@InternetOpen|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@InternetConnect|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@HttpOpenRequest|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@HttpAddRequestHeaders|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@HttpSendRequest|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@InternetReadFile|book{2}}{46}
\indexentry{1A@\textbf{Function}!1@InternetOpenA|book{2}}{47}
\indexentry{1A@\textbf{Function}!1@GetTempFileName|book{2}}{61}
\indexentry{1A@\textbf{Function}!1@CreateToolHelp32Snapshot|book{2}}{61}
\indexentry{1A@\textbf{Function}!1@CreateProcess|book{2}}{85}
\indexentry{1A@\textbf{Function}!1@wcsicmp|book{2}}{106}
\indexentry{1A@\textbf{Function}!1@GetTempPath|book{2}}{121}
\indexentry{1A@\textbf{Function}!1@FindResource|book{2}}{140}
\indexentry{1A@\textbf{Function}!1@LoadResource|book{2}}{140}
\indexentry{1A@\textbf{Function}!1@SizeofResource|book{2}}{140}
\indexentry{1A@\textbf{Function}!1@LockResource|book{2}}{140}
\indexentry{1A@\textbf{Function}!1@CreateMutex|book{2}}{143}
\indexentry{1A@\textbf{Function}!1@GetKeyState|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@GetAsyncKeyState|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@GetWindowText|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@OpenClipBoard|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@GetClipboardData|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@CloseClipboard|book{2}}{144}
\indexentry{1A@\textbf{Function}!1@ShellExecute|book{2}}{154}
\indexentry{1A@\textbf{Function}!1@GetAsyncKeyState|book{2}}{175}
\indexentry{1A@\textbf{Function}!1@URLDownloadToFileA|book{3}}{72}
\indexentry{1A@\textbf{Function}!1@WinExec|book{3}}{72}
\indexentry{1A@\textbf{Function}!1@WinExec|book{3}}{156}
\indexentry{1A@\textbf{Function}!1@SetWindowsHookEx|book{4}}{126}
\indexentry{1A@\textbf{Function}!1@SetWindowsHookEx|book{5}}{67-70}
\indexentry{1A@\textbf{Function}!1@IsDebuggerPresent|book{5}}{6}
\indexentry{1A@\textbf{Function}!1@OutputDebugString|book{5}}{12}
\indexentry{1A@\textbf{Function}!1@QueryInformationProcess|book{5}}{12}
\indexentry{1A@\textbf{Function}!1@CheckRemoteDebuggerPresent|book{5}}{12}
\indexentry{1A@\textbf{Function}!1@GetTickCount|book{5}}{13}
\indexentry{1A@\textbf{Function}!1@GetLocalTime|book{5}}{13}
\indexentry{1A@\textbf{Function}!1@GetSystemTime|book{5}}{13}
\indexentry{1A@\textbf{Function}!1@QuerySystemTime|book{5}}{13}
\indexentry{1A@\textbf{Function}!1@AllocateVirtualMemory|book{5}}{26}
\indexentry{1A@\textbf{Function}!1@ProtectVirtualMemory|book{5}}{26}
\indexentry{1A@\textbf{Function}!1@WriteVirtualMemory|book{5}}{26}
\indexentry{1A@\textbf{Function}!1@RtlDecompressBuffer|book{5}}{26}
\indexentry{1A@\textbf{Function}!1@RtlDecompressBuffer|book{5}}{29}
\indexentry{1A@\textbf{Function}!1@QueryInformationProcess|book{5}}{38}
\indexentry{1A@\textbf{Function}!1@CreateProcess|book{5}}{51}
\indexentry{1A@\textbf{Function}!1@VirtualAlloc|book{5}}{52}
\indexentry{1A@\textbf{Function}!1@WriteProcessMemory|book{5}}{52}
\indexentry{1A@\textbf{Function}!1@GetProcAddress|book{5}}{53}
\indexentry{1A@\textbf{Function}!1@LoadLibrary|book{5}}{53}
\indexentry{1A@\textbf{Function}!1@UnmapViewOfSection|book{5}}{53}
\indexentry{1A@\textbf{Function}!1@CreateProcess|book{5}}{54}
\indexentry{1A@\textbf{Function}!1@UnmapViewOfSection|book{5}}{54}
\indexentry{1A@\textbf{Function}!1@VirtualAlloc|book{5}}{54}
\indexentry{1A@\textbf{Function}!1@WriteProcessMemory|book{5}}{54}
\indexentry{1A@\textbf{Function}!1@ResumeThread|book{5}}{54}
\indexentry{1A@\textbf{Function}!1@GetCursorPos|book{5}}{66}
\indexentry{1A@\textbf{Function}!1@GetForeGroundWindow|book{5}}{66}
\indexentry{1A@\textbf{Function}!1@GetTickCount|book{5}}{66}
\indexentry{1A@\textbf{Function}!1@SetWindowsHookEx|book{5}}{67}
\indexentry{1A@\textbf{Function}!1@SetWindowsHookEx|book{5}}{70}
\indexentry{1A@\textbf{Function}!1@BlockInput|book{5}}{76}
\indexentry{1A@\textbf{Function}!1@GetModuleHandle|book{5}}{77}
\indexentry{1A@\textbf{Function}!1@FindWindow|book{5}}{79}
\indexentry{1A@\textbf{Function}!1@CreateToolHelp32Snapshot|book{5}}{85}
\indexentry{1A@\textbf{Function}!1@Process32First|book{5}}{85}
\indexentry{1A@\textbf{Function}!1@Process32Next|book{5}}{85}
\indexentry{1A@\textbf{Function}!1@RegOpenKey|book{5}}{89}
\indexentry{1A@\textbf{Function}!1@BlockInput|book{5}}{92}
\indexentry{1A@\textbf{Function}!1@GetModuleHandle|book{5}}{92}
\indexentry{1A@\textbf{Function}!1@FindWindows|book{5}}{92}
\indexentry{1A@\textbf{Function}!1@KdDebuggerEnabled|book{5}}{92}
\indexentry{1A@\textbf{Function}!1@LoadLibrary|book{5}}{146}
\indexentry{1A@\textbf{Function}!1@RegOpenKey|book{4}}{87}
\indexentry{1A@\textbf{Function}!1@VirtualAlloc|book{4}}{92}
\indexentry{1A@\textbf{Function}!1@EnumProcesses|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@EnumProcesses|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@OpenProcess|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@VirtualAlloc|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@WriteProcessMemory|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@CreateRemoteThread|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@Process32First|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@Process32Next|book{4}}{108}
\indexentry{1A@\textbf{Function}!1@QuerySystemInformation|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@AllocateVirtualMemory|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@WriteVirtualMemory|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@CreateThread|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@RegOpenKey|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@OpenKey|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@CreateUserThread|book{4}}{109}
\indexentry{1A@\textbf{Function}!1@CreateRemoteThread|book{4}}{113}
\indexentry{1A@\textbf{Function}!1@OpenProcess|book{4}}{114}
\indexentry{1A@\textbf{Function}!1@WriteProcessMemory|book{4}}{116}
\indexentry{1A@\textbf{Function}!1@LoadLibrary|book{4}}{123}
\indexentry{1A@\textbf{Function}!1@CreateRemoteThread|book{4}}{123}
\indexentry{1A@\textbf{Function}!1@ReadProcessMemory|book{4}}{127}
\indexentry{1A@\textbf{Function}!1@VirtualProtect|book{4}}{127}
\indexentry{1A@\textbf{Function}!1@WriteProcessMemory|book{4}}{127}
\indexentry{1A@\textbf{Function}!1@ReadProcessMemory|book{4}}{129}
\indexentry{1A@\textbf{Function}!1@ReadFile|book{4}}{87}
\indexentry{1A@\textbf{Function}!1@CryptDecrypt|book{4}}{90-92}

\indexentry{1B@\textbf{Structure}!1@STARTUPINFOA|book{2}}{94}
\indexentry{1B@\textbf{Structure}!1@PROCESS\_INFORMATION|book{2}}{94}
\indexentry{1B@\textbf{Structure}!1@KBDLLHOOKSTRUCT|book{2}}{179}
\indexentry{1B@\textbf{Structure}!1@EXCEPTION\_REGISTRATION|book{2}}{179}

\indexentry{1A@\textbf{Instruction}!1@ORANGE TAGS|book{1}}{1}
\indexentry{2A@\textbf{Instruction}!1@CALL|book{2}}{21}
\indexentry{2A@\textbf{Instruction}!1@PUSH|book{2}}{22}
\indexentry{2A@\textbf{Instruction}!1@JMP|book{2}}{23}
\indexentry{2A@\textbf{Instruction}!1@MOV|book{2}}{23}
\indexentry{2A@\textbf{Instruction}!1@SCASB|book{2}}{23}
\indexentry{2A@\textbf{Instruction}!1@MOV|book{2}}{30}
\indexentry{2A@\textbf{Instruction}!1@ADD|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@SUB|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@IMUL|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@SHL|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@SHR|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@AND|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@OR|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@MOV|book{2}}{38}
\indexentry{2A@\textbf{Instruction}!1@JMP|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@CALL|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@CMP|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JMP|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@CALL|book{2}}{39}
\indexentry{2A@\textbf{Instruction}!1@RET|book{2}}{39}
\indexentry{2A@\textbf{Instruction}!1@LOOP|book{2}}{39}
\indexentry{2A@\textbf{Instruction}!1@SUB|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@AND|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@CMP|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@TEST|book{2}}{40}
\indexentry{2A@\textbf{Instruction}!1@JCC|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JA|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JB|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JL|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JG|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JE|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@JZ|book{2}}{41}
\indexentry{2A@\textbf{Instruction}!1@LEAVE|book{2}}{83}
\indexentry{2A@\textbf{Instruction}!1@RET|book{2}}{83}
\indexentry{2A@\textbf{Instruction}!1@JC|book{2}}{106}
\indexentry{2A@\textbf{Instruction}!1@JB|book{2}}{106}
\indexentry{2A@\textbf{Instruction}!1@LOOPcc|book{2}}{109}
\indexentry{2A@\textbf{Instruction}!1@SETZ|book{2}}{185}
\indexentry{2A@\textbf{Instruction}!1@NOP|book{5}}{9}
\indexentry{2A@\textbf{Instruction}!1@RDTSC|book{5}}{13}

\indexentry{1A@\textbf{Register}!1@PURPLE TAGS|book{1}}{1}
\indexentry{3A@\textbf{Register}!1@RIP|book{1}}{93}
\indexentry{3A@\textbf{Register}!1@EIP|book{2}}{93}
\indexentry{3A@\textbf{Register}!1@EAX add/multi/return value|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@ECX counter looping|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@EBP reference arguments passed in func|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@ESP point last item on stack|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@EDI memory transfer instructions|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@ESI memory transfer instructions|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@EBX generic registers|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@EDX generic registers|book{2}}{25}
\indexentry{3A@\textbf{Register}!1@EIP points next instruction to exec|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@CS code segment|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@DS data segment|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@ES|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@FS|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@GS|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@SS stack segment|book{2}}{26}
\indexentry{3A@\textbf{Register}!1@EBP|book{2}}{67}
\indexentry{3A@\textbf{Register}!1@GS|book{5}}{100}
\indexentry{3A@\textbf{Register}!1@GS|book{5}}{127}

\indexentry{999ZZZ@\blankline|newpage\comment}{0}

\comment{********************************************************************************************
                                       FIRST BOOK SECTION
*****************************************************************************************************}

\indexentry{Malware analysis|book{1}}{5}
\indexentry{Malware|book{1}}{5}
\indexentry{Malware!what is malware and malware analysis|book{1}}{5}
\indexentry{Malware!definition, design, explaination of malware|book{1}}{5}
\indexentry{Malware!malware is code used to perform malicious actions|book{1}}{5}
\indexentry{Core Malware Analysis Techniques|book{1}}{6}
\indexentry{Malware Analysis Techniques|book{1}}{6}
\indexentry{Malicious Windows Executables|book{1}}{7}
\indexentry{Malicious Documents and Scripts|book{1}}{7}
\indexentry{Malware Analyst|book{1}}{8}
\indexentry{Malware analysis!Stages!Manual, Interactive, Static, Fully Automated|book{1}}{9}
\indexentry{Malware analysis!Fully automated!Detailed Reports, Registry, mutex values, network traffic, quickly assess|book{1}}{9}
\indexentry{Malware analysis!Static Analysis!Metadata, strings, structure, header data|book{1}}{9}
\indexentry{Malware analysis!Interactive Behavior!Running program isolated lab to reveal behaviour |book{1}}{9}
\indexentry{Malware analysis!Manual Code|book{1}}{9}
\indexentry{Malware analysis!Input!Verbal reports, Sus files, file/mem images, network logs, anomaly obs|book{1}}{10}
\indexentry{Malware analysis!Output!Malware Behaviour, Identification, Attacker Profile, IR Reccoms, Reports IOCs, Trends|book{1}}{10}
\indexentry{Malware analysis!Results|book{1}}{10}
\indexentry{Malware report|book{1}}{11}
\indexentry{MAEC Malware Capabilities project|book{1}}{11}
\indexentry{MBC Malware Behavior Catalog|book{1}}{11}
\indexentry{Automated analysis|book{1}}{13}
\indexentry{VirusTotal|book{1}}{13}
\indexentry{Yotalhash|book{1}}{13}
\indexentry{MetaDefender|book{1}}{13}
\indexentry{VirSCAN|book{1}}{13}
\indexentry{AVCaesar|book{1}}{13}
\indexentry{Malware Hash Registry|book{1}}{13}
\indexentry{HashSets|book{1}}{13}
\indexentry{Any.run|book{1}}{13}
\indexentry{CAPE|book{1}}{13}
\indexentry{Intezer Analyze|book{1}}{13}
\indexentry{Hybrid Analysis|book{1}}{13}
\indexentry{PassiveTotal|book{1}}{13}
\indexentry{Censys|book{1}}{13}
\indexentry{Open Threat Exchange|book{1}}{13}
\indexentry{vURL|book{1}}{13}
\indexentry{Quttera|book{1}}{13}
\indexentry{urlscana.io|book{1}}{13}
\indexentry{VirusTotal|book{1}}{14}
\indexentry{DLL|book{1}}{14}
\indexentry{Hybrid Analysis|book{1}}{15}
\indexentry{Mutant{1}}{15}
\indexentry{Mutex|book{1}}{15}
\indexentry{RiskIQ|book{1}}{16}
\indexentry{Open Threat Exchange|book{1}}{16}
\indexentry{OSINT|book{1}}{17}
\indexentry{Beaconing!Brief periodic messages to the adversary|book{1}}{17}
\indexentry{Command and control (C2)|book{1}}{17}
\indexentry{Exfiltration!Stolen data keystroke logs|book{1}}{17}
\indexentry{Indicator of Compromise (IOC)|book{1}}{17}
\indexentry{Internet access Lab!Malicious Websites, exploit kits, C2, etc|book{1}}{18}
\indexentry{TOR!Adversaries can track exit nodes|book{1}}{19}
\indexentry{VPN!OpenVPN, WireGuard, AlgoVPN|book{1}}{19}
\indexentry{DNS leakage!Observing source DNS queries to malicious domain|book{1}}{19}
\indexentry{TOR Socks!utility for tunneling SOCKs Traffic through TOR|book{1}}{19}
\indexentry{Honeypot|book{1}}{20}
\indexentry{Malware lab|book{1}}{24-25}
\indexentry{Virtualization!Emulates hardware to VM and software to network within host|book{1}}{26}
\indexentry{Malware lab!Isolation!Bugs, Weakness, Exploit, Escape VM|book{1}}{28}
\indexentry{Malware lab!Configuration|book{1}}{28}
\indexentry{Malware lab!Network Isolation!Host-Only, or Stronger Separation Virtual Network - No Host|book{1}}{29}
\indexentry{Self-defense!Detect VM, monitor, tools, confuse code, terminate, sleep|book{1}}{30-31}
\indexentry{Snapshot!Save and restore state of VM|book{1}}{32}
\indexentry{Disk Cloning|book{1}}{33}
\indexentry{Disk Cloning!Clonezilla|book{1}}{33}
\indexentry{Disk Cloning!Fog|book{1}}{33}
\indexentry{Disk Cloning!dd|book{1}}{33}
\indexentry{PXE booting|book{1}}{33}
\indexentry{Deep Freeze!Physical Snapshot/backup|book{1}}{33}
\indexentry{RollBack Rx!Physical Snapshot/backup|book{1}}{33}
\indexentry{Static properties!Analysis|book{1}}{34}
\indexentry{Static Analysis Tools!PeStudio,strings, CFF, peframe, DIE|book{1}}{34}
\indexentry{Behavioral Analysis!ProcMon, ProcHack, RegShot, fakeDNS|book{1}}{34}
\indexentry{Code analysis!Ghidra, windbg OllyDumb, Scylla|book{1}}{34}
\indexentry{Enviroment variable appdata!users profile directory|book{1}}{38}
\indexentry{Administrative rights!Admin Privileges always run malware as this.|book{1}}{40}
\indexentry{Static properties!file/sect hash, packer, embedded, imp/exp, strings|book{1}}{42}
\indexentry{pestr!extracting strings, encoding -l unicode -a scan whole file|book{1}}{42}
\indexentry{Strings|book{1}}{42-43}
\indexentry{Registry|book{1}}{43}
\indexentry{\CurrentVersion\Run Registry Key!Persistence Presence|book{1}}{43}
\indexentry{Pev Toolkit!Tools examining Windows exe|book{1}}{43}
\indexentry{CurrentVersion/Run|book{1}}{44}
\indexentry{Persistence|book{1}}{44}
\indexentry{Indicator of Compromise (IOC)|book{1}}{44}
\indexentry{PeStudio!Static Analysis Display Attributes, hashes, indicators|book{1}}{45-46}
\indexentry{Imports!DLL libraries required for execution|book{1}}{46}
\indexentry{Digital Fingerprints!hash values example|book{1}}{46}
\indexentry{File Sections!grouping of code and data, .text .data .rsrc .reloc|book{1}}{46}
\indexentry{Windows API Calls!RegSetValueExA!Capability to set registry values|book{1}}{46}
\indexentry{Windows API Calls!CryptDeriveKey!Windows Cryptographic capabilities|book{1}}{46}
\indexentry{peframe!Static Analysis Display Attributes, hashes, indicators|book{1}}{47}
\indexentry{Detect It Easy (DIE)|book{1}}{48}
\indexentry{Exeinfo PE!Tools used to generate exe|book{1}}{48}
\indexentry{PE (Portable Executable)|book{1}}{48}
\indexentry{Malware Behavioral Analysis|book{1}}{52}
\indexentry{Process Hacker!Detailed Process Explorer Tool|book{1}}{52}
\indexentry{Process Monitor!Process Interaction, Reg, File Sys, Network|book{1}}{52}
\indexentry{Regshot!Changes in File Sys and Registry|book{1}}{52}
\indexentry{ProcDOT!Visualizes Process Monitor Logsbook{1}}{52}
\indexentry{Wireshark!Sniffs Captures Network Traffic|book{1}}{52}
\indexentry{TcpLogView what is|book{1}}{52}
\indexentry{Process Hacker!Process list, services, network connections|book{1}}{53}
\indexentry{Process Monitor|book{1}}{54}
\indexentry{Regshot!Snapshot Registry before after infection|book{1}}{55}
\indexentry{Wireshark!Sniffing Network Traffic and how to start capture|book{1}}{56}
\indexentry{Regshot!Names of files to be renamed sys restart|book{1}}{59-60}
\indexentry{PF File Extension!Prefetched allow OS process start faster|book{1}}{60}
\indexentry{Process Monitor!Filter!Process Name, Process Identifier (PID)|book{1}}{61}
\indexentry{ProcDOT!Correlate, Filter Visualize Procmon Logs PCAP|book{1}}{63-65}
\indexentry{Wireshark!DNS query!Log example|book{1}}{66}
\indexentry{DNS|book{1}}{66}
\indexentry{fakedns!listen and automatic respond all host DNS queries UDP 53 |book{1}}{67}
\indexentry{nslookup|book{1}}{67}
\indexentry{Wireshark!DNS Noise!microsoft.com|book{1}}{66}
\indexentry{Wireshark!RST ACK!Packet indicating connection not established|book{1}}{66}
\indexentry{Malware Behavior Analysis Configuration Change!what change caused what new behavior|book{1}}{70}
\indexentry{Resource Starvation!depriving malware from resources.|book{1}}{70}
\indexentry{httpd!Web server NGINX |book{1}}{71}
\indexentry{httpd!http request|book{1}}{72}
\indexentry{Wireshark!GET Request!Request server to provide website or file|book{1}}{73}
\indexentry{Wireshark!TCP Stream!Shows entire traffic capture|book{1}}{73}
\indexentry{ICP IP, Hostname, Encoded Hex|book{1}}{73}
\indexentry{Hex to ASCII Tool!xxd -r -p filename.hex|book{1}}{73}
\indexentry{xxd decode hex to ASCII!xxd -r -p filename.hex|book{1}}{73}
\indexentry{xxd|book{1}}{75}
\indexentry{encoded.hex|book{1}}{75}
\indexentry{Disassemblers and Debuggers!Ghidra, IDA, Windbg, Cutter, Binary Ninja, Hopper|book{1}}{80}
\indexentry{Ghidra!Disassembler and decompiler|book{1}}{80}
\indexentry{IDA!Disassembler with built-in debugger|book{1}}{80}
\indexentry{WinDbg!Windows Debugger|book{1}}{80}
\indexentry{Cutter!Code Analysis Toolkit|book{1}}{80}
\indexentry{Binary Ninja!Disassembler strong automated analysis|book{1}}{80}
\indexentry{Hopper!Disassembler and Decompiler|book{1}}{80}
\indexentry{Disassembling!Translating binary machine instructions to human language code|book{1}}{81}
\indexentry{Decompiling!Generate approx original program source code|book{1}}{81}
\indexentry{Code analysis!Static|book{1}}{81}
\indexentry{Code analysis!Dynamic|book{1}}{81}
\indexentry{Debugger|book{1}}{81}
\indexentry{Emulators!Imitates behavior CPU, OS, runtime components, preview actions|book{1}}{82}
\indexentry{Emulators!Capa|book{1}}{82}
\indexentry{Emulators!Speakeasy run_speakeasy.py -t filename.exe -o speakeasy.json2> speakeasy.txt|book{1}}{82}
\indexentry{Emulators!binee|book{1}}{82}
\indexentry{Emulators!Qiling|book{1}}{82}
\indexentry{Emulators!Vivsect|book{1}}{82}
\indexentry{Emulators - INetSim!Emulate HTTPS, SMTP,FTP,POP3,TFTP,IRC|book{1}}{119}
\indexentry{Speakeasy|book{1}}{83}
\indexentry{Speakeasy!API Call|book{1}}{83}
\indexentry{Speakeasy!Handle|book{1}}{83}
\indexentry{Handle|book{1}}{83}
\indexentry{Speakeasy!Unsupported API!Unfimilar API Call CryptDeriveKey|book{1}}{84}
\indexentry{jq!jq ".entry_points[].apis[].api_name" speakeasy.json | more|book{1}}{85}
\indexentry{jq!JSON Parser|book{1}}{85}
\indexentry{Capa!Focuses on automatic identify capabilities - uses ATT&CK and MBC|book{1}}{86}
\indexentry{Capa!report|book{1}}{87}
\indexentry{Capa!Command!capa -vv filename.exe | more|book{1}}{88}
\indexentry{x64dbg!Static and Dynamic Code Analysis|book{1}}{89}
\indexentry{x64dbg!functions!hexdec, relative addr, offsets.|book{1}}{89}
\indexentry{x64dbg!Single Step!One instruction at a time|book{1}}{90}
\indexentry{x64dbg!Breakpoints!Set Breakpoints interrupt execution of program|book{1}}{90}
\indexentry{Windows API Calls -ReadFile!Kernel32.dll read date from I/O device|book{1}}{91}
\indexentry{x64dbg!SetBPX, bpx, bp!Set Breakpoint command|book{1}}{92}
\indexentry{BPX|book{1}}{92}
\indexentry{BP|book{1}}{92}
\indexentry{x64dbg!RIP pointer!64bit Address of the current instruction|book{1}}{93}
\indexentry{x32dbg!EIP pointer!32bit Address of the current instruction|book{1}}{93}
\indexentry{RIP 64bit|book{1}}{93}
\indexentry{EIP 32bit|book{1}}{93}
\indexentry{Process Hacker!handle!x64dbg, ProcHacker|book{1}}{95}
\indexentry{x64dbg!Call Stack!path of nested function in reverse chrono order program executed before pausing|book{1}}{96}
\indexentry{x64dbg!Run to user code!Finished executing the breakpoint to see what happens.|book{1}}{96}
\indexentry{x64dbg!Call Operand!Functions invoked in assembly|book{1}}{97}
\indexentry{Windows API Calls!CryptEncrypt!API Call Decrypts or Encrypts.|book{1}}{97}
\indexentry{Windows API Calls!CryptDecrypt!places decrypted data into buffer whose address passed to function name pbData|book{1}}{99}
\indexentry{API Monitor!Examine API Calls made by processes|book{1}}{101}
\indexentry{ROR!Algorithms rotate right, rotate left|book{1}}{103}
\indexentry{ROL!Algorithms rotate right, rotate left|book{1}}{103}
\indexentry{XOR!Change each char with 1-byte key value (5b)|book{1}}{103}
\indexentry{ROT!Rotates alphabet chars by a certain number of positions (ROT13)|book{1}}{103}
\indexentry{CyberChef!Decoding, deobfuscating, decrypting data|book{1}}{104}
\indexentry{CyberChef!Recipe|book{1}}{104}
\indexentry{CyberChef!Output|book{1}}{104}
\indexentry{CyberChef!XOR!How to use XOR key to decode|book{1}}{106}
\indexentry{Exploring Network Interactions|book{1}}{111}
\indexentry{Botnet C2 - Large number of infected hosts connecting to webserver|book{1}}{117}
\indexentry{FakeDNS|book{1}}{118}
\indexentry{INetSim!Emulate HTTPS, SMTP,FTP,POP3,TFTP,IRC|book{1}}{119}
\indexentry{INetSim!/etc/inetsim/inetsim.conf!main conf, services emulate ports, HTTP response|book{1}}{119}
\indexentry{INetSim!/var/log/inetsim Logs!service.log details requests received, responses provided|book{1}}{119}
\indexentry{INetSim!/var/lib/inetsim Data!data files provided by HTTP or SSL Cert|book{1}}{119}
\indexentry{INetSim!/var/log/inetsim/service.log Output!shows connection details, IOCs, insights|book{1}}{119}
\indexentry{INetSim!DNS!inetsim.conf remove poundsign start-service dns, dns-default-ip to remnux. httpd stop to avoid conflicts|book{1}}{119}
\indexentry{INetSim!SMTP|book{1}}{119}
\indexentry{INetSim!FTP|book{1}}{119}
\indexentry{INetSim!POP3|book{1}}{119}
\indexentry{INetSim!TFTP|book{1}}{119}
\indexentry{INetSim!IRC|book{1}}{119}
\indexentry{Fiddler!HTTP Intercept, capture HTTPS, Decrypt HTTPS, AutoResponder, Enable rules.|book{1}}{123}
\indexentry{Hard-coded IP!set-static-ip ipaddress of malware|book{1}}{125}
\indexentry{IP redirection|book{1}}{126}
\indexentry{iptables!set-static-ip|book{1}}{126}
\indexentry{iptables!Linux Firewall, NAT intercept redirect network traffic|book{1}}{126}
\indexentry{iptables!accept-all-ips|book{1}}{126}
\indexentry{netcat listener!sudo nc -l -p 3127|book{1}}{126}
\indexentry{Intercepting IP Connections|book{1}}{127}
\indexentry{Wireshark!HTTP Connection Details!HTTP GET Request via httpd and accept-all-ips|book{1}}{129}

\comment{********************************************************************************************
                                      SECOND BOOK SECTION
*****************************************************************************************************}

\indexentry{Reversing Malicious Code|book{2}}{4}
\indexentry{Code lifecycle!Source, Compiler, ObjCode, Linker, Libraries, File, Loader|book{2}}{5}
\indexentry{Compiler|book{2}}{5}
\indexentry{Linker|book{2}}{5}
\indexentry{Loader|book{2}}{5}
\indexentry{Object Code|book{2}}{5}
\indexentry{Executable File|book{2}}{5}
\indexentry{Code lifecycle!Compiler|book{2}}{5}
\indexentry{Code lifecycle!Linker|book{2}}{5}
\indexentry{Code lifecycle!Loader|book{2}}{5}
\indexentry{Code lifecycle!Object Code|book{2}}{5}
\indexentry{Code lifecycle!Executable File|book{2}}{5}
\indexentry{Ghidra!Static Code Analysis Tool NSA|book{2}}{6}
\indexentry{SRE \goto Software Reversing Engineering|comment}{0}
\indexentry{IDA|book{2}}{6}
\indexentry{Radare|book{2}}{6}
\indexentry{Cutter|book{2}}{6}
\indexentry{Binary Ninja|book{2}}{6}
\indexentry{Hopper|book{2}}{6}
\indexentry{Capstone|book{2}}{6}
\indexentry{Ghidra!Create Project|book{2}}{8}
\indexentry{Ghidra!Project Analysis|book{2}}{10}
\indexentry{Ghidra!Program Tree|book{2}}{12}
\indexentry{Ghidra!Sections|book{2}}{12}
\indexentry{Ghidra!Headers|book{2}}{12}
\indexentry{Ghidra!File Structure .text!Contains executable code|book{2}}{12}
\indexentry{Ghidra!File Structure .rdata!Contains read-only data|book{2}}{12}
\indexentry{Ghidra!File Structure .data!Contains data|book{2}}{12}
\indexentry{Ghidra!File Structure .reloc!Contains relocation data fix addresses|book{2}}{12}
\indexentry{Function Execution Top to Bottom{2}}{13}
\indexentry{Assembly Instructions!Example!PUSH, MOVE, TEST Column{2}}{13}
\indexentry{Memory Address or Offset Example!00401007, 008, 009 first column{2}}{13}
\indexentry{Instructions!Operands!Assembly Language!EBP, EBP - EAX, ESI {2}}{13}
\indexentry{Ghidra!Function Graph!Visualizing loops, complex conditionals within functions. |book{2}}{14}
\indexentry{Ghidra!Function Graph!green arrows condition met|book{2}}{14}
\indexentry{Ghidra!Function Graph!red arrows condition not met|book{2}}{14}
\indexentry{Ghidra!Function Graph!blue arrow code block ends uncondition jump|book{2}}{14}
\indexentry{Ghidra!Browser Field Formatter!Resizing fields, Field Categories, Field Controllers|book{2}}{15}
\indexentry{Ghidra!Exports Symbol Tree!Exports Entry points into the program|book{2}}{16}
\indexentry{Ghidra!Imports Symbol Tree!Imports Program dependencies|book{2}}{16}
\indexentry{Ghidra!Import Address Table!APIs (functions) used by the program contained in external DLLs|book{2}}{17}
\indexentry{Ghidra!Symbol References Menu!List of API (functions)|book{2}}{17}
\indexentry{Ghidra!Symbol References - IOC API calls!Example, Registry API Calls for persistence|book{2}}{18}
\indexentry{strace (Strace-for-NT) Tool!monitors and analyses system calls|book{2}}{19}
\indexentry{API|book{2}}{19}
\indexentry{Ghidra!Calls are wrapped in Libraries (DLLs)|book{2}}{19}
\indexentry{Ghidra!System Calls same as API Calls|book{2}}{19}
\indexentry{Systeminternals tool System Monitor!sysmon monitors system call register and files|book{2}}{19}
\indexentry{OS provide managed access for user space code!allocating memory requires mgmt of system ram|book{2}}{19}
\indexentry{Windows API Documentation|book{2}}{20}
\indexentry{Windows API Documentation!Purpose|book{2}}{20}
\indexentry{Windows API Documentation!Inputs - Parameters|book{2}}{20}
\indexentry{Windows API Documentation!Outputs - Return Value|book{2}}{20}
\indexentry{Windows API Documentation!Ex Extended update function|book{2}}{20}
\indexentry{Windows API Documentation!A ANSI 8 bit character|book{2}}{20}
\indexentry{Windows API Documentation!W Wide 16 bit charactor 2 bytes UTF-16|book{2}}{20}
\indexentry{Ghidra - CALL instruction!Performs a function call|book{2}}{21}
\indexentry{Instructions!Operand addressing modes!Register|book{2}}{23}
\indexentry{Instructions!Operand addressing modes!Immediate value|book{2}}{23}
\indexentry{Instructions!Operand addressing modes!memory address used as operand|book{2}}{23}
\indexentry{Instructions have two components!Operation and Operand|book{2}}{23}
\indexentry{Instructions!Operands!Have 0 - 3 Operands, A register, Memory location, Immediate value|book{2}}{23}
\indexentry{Instructions!Operand Layout!Destination First - Source Second|book{2}}{23}
\indexentry{Instructions!Operand Implied (Implicit) by Instructions!Stack Operations - move data to and from Extended Stack Pointer (ESP)|book{2}}{23}
\indexentry{Instructions!Operand Implied (Implicit) by Instructions!SCASB - Scans memory EDI register points at value equal to AL register|book{2}}{23}
\indexentry{Addressing mode|book{2}}{23}
\indexentry{Register-based CPU|book{2}}{24}
\indexentry{Instructions!Execution!fetch from mem, decode instruction perform action based on instruction, act on registers and mem locations|book{2}}{24}
\indexentry{Registers!CPU on-chip memory locations|book{2}}{24}
\indexentry{Registers!(32bit)Types!General purpose ECX, particular use, or both|book{2}}{24}
\indexentry{Registers!(32bit)(General Purpose)!EAX, ECX, EBP, ESP, ESI/EDI|book{2}}{25}
\indexentry{Registers!(32bit)(General Purpose) EAX!EAX, ECX, EBP, ESP, ESI/EDI|book{2}}{25}
\indexentry{Registers!(32bit)(General Purpose) ECX!Used as a counter (Loops)|book{2}}{25}
\indexentry{Registers!(32bit)(General Purpose) EBP!Reference arguments passed into a function and local variables within a function|book{2}}{25}
\indexentry{Registers!(32bit)(General Purpose) ESP!Point to the last item on a stack and affected by stack-related functions|book{2}}{25}
\indexentry{Registers!(32bit)(General Purpose) ESI/EDI!Memory transfer instructions|book{2}}{25}
\indexentry{Registers!(32bit)(Special Use)!hold flags and track program execution|book{2}}{26}
\indexentry{Registers!(32bit)(Special Use) EIP/RIP!points to next instruction to execute - EIP 32bit / RIP 64bit|book{2}}{26}
\indexentry{Registers!(32bit)(Special Use) EFLAGS!Outcome of computations and control operation of CPU|book{2}}{26}
\indexentry{Registers!(32bit)(Special Use) Segment!CS, DS, ES, FS, GS, SS|book{2}}{26}
\indexentry{Special Use Registers|book{2}}{26}
\indexentry{EFLAGS|book{2}}{26}
\indexentry{Registers!(32bit Architecture)!EAX32/AX16/AH8/AL8 - ECX32/CX16/CH8/CL8 - EBX32/BX16/BH8/BL8|book{2}}{27}
\indexentry{Registers!EAX register 32 bit|book{2}}{27}
\indexentry{Registers!AX register 16 bit|book{2}}{27}
\indexentry{Registers!AH register 8 bit|book{2}}{27}
\indexentry{Registers!AL register 8 bit|book{2}}{27}
\indexentry{Registers!Data Sizes!byte/word/dword/qword!8bit/16bit/32bit/64bit - Assembly Instructions (dword) |book{2}}{28}
\indexentry{Data Sizes!byte/word/dword/qword!8bit/16bit/32bit/64bit - Assembly Instructions (dword) |book{2}}{28}
\indexentry{Word 16bits|book{2}}{28}
\indexentry{Dword 32bits|book{2}}{28}
\indexentry{Byte 8bits|book{2}}{28}
\indexentry{Qword 64bits|book{2}}{28}
\indexentry{Pointer!variable contains the address of location in memory - points to addresses in memory |book{2}}{29}
\indexentry{Dereferencing!Pointer Access!Address the pointer points is accessed|book{2}}{29}
\indexentry{Direct Addressing!Address is specified in a Operand|book{2}}{31}
\indexentry{Effective Address (EA)!Calculated Address or resides in register|book{2}}{32}
\indexentry{EA \goto Effective Address|comment}{0}
\indexentry{Addressing mode|book{2}}{32}
\indexentry{Indirect Memory Addressing (square brackets)![EAX] access allo mem. [EBP + 0x10] access data on stack, [EAX + EBX *8] access and array 8bytes|book{2}}{32}
\indexentry{Instructions!Operand!Square Brackets - Brackets mean fetch data at the specified address MOV EAX , [0x410230]. Classed as direct addressing as de-referencing immediate value|book{2}}{32}
\indexentry{Data Structure - Common Examples!Strings, linked lists, network sockets, file handles, arrays|book{2}}{34}
\indexentry{Data Structure!representation of information, access and manipulate that representation|book{2}}{34}
\indexentry{String|book{2}}{34}
\indexentry{self-referencing code!code-data duality - reference themselves during runtime|book{2}}{35}
\indexentry{self-modifying code!code-data duality - modify themselves during runtime|book{2}}{35}
\indexentry{Symbolic Constant!hex representation of the value PUSH 0x80000001 Set Equate HKEY_Current_User|book{2}}{36}
\indexentry{Ghidra!et Equate!Text representation of a numerical value|book{2}}{36}
\indexentry{Windows API accept arguments using flags!combined symbolic constants, binary or operator|book{2}}{37}
\indexentry{OR Operator|book{2}}{37}
\indexentry{Assembly Instructions!Three Categories, data manipulation, data transfer, branching and conditional|book{2}}{38}
\indexentry{Assembly Instructions!Data Manipulation!Arithmetic (ADD,SUB,IMUL) Boolean (AND,OR) Bit Manipulation (SHR,SHL)|book{2}}{38}
\indexentry{Assembly Instructions!Data Transfer!PUSH,/POP, MOV, XCHG, LEA|book{2}}{38}
\indexentry{Assembly Instructions!Branching and Conditionals!JMP, CALL, CMP, TEST|book{2}}{38}
\indexentry{Branch Instructions!Direct code execution to another location |book{2}}{39}
\indexentry{Branching!Conditional and Unconditional Jumps!CALL, RET and Looping|book{2}}{39}
\indexentry{Jumps!Unconditional!branch to a new location in memory, JMP, CALL, RET Instructions|book{2}}{40}
\indexentry{Jumps!Conditional!Branch to a new location in memory only after a condition is met. jcc and loop instructions|book{2}}{40}
\indexentry{Jumps!Conditional - Multiple Instructions!Disadvantage, they modify values of destination operand.|book{2}}{41}
\indexentry{Jcc instructions!Conditional Jumps!Perform Jump if condition is met - JZ, JB, JE, JG, etc|book{2}}{42}
\indexentry{Jump Example|book{2}}{43}
\indexentry{Ghidra!Set Comments!Click line and press semicolon|book{2}}{44}
\indexentry{HTTP Command and Control!Most common - HTTP libraries transition between plaintext HTTP and encrypted HTTPS|book{2}}{45}
\indexentry{DNS|book{2}}{45}
\indexentry{IRC!Internet Relay Chat!Controlling malicious code|book{2}}{45}
\indexentry{P2P|book{2}}{45}
\indexentry{HTTP Command and Control Windows API!InternetOpen, InternetConnect, HttpOpenRequest, HttpAddRequestHeaders, HttpSendRequest, InternetReadFile.|book{2}}{46}
\indexentry{Ghidra!Data Type|book{2}}{47}
\indexentry{Ghidra!Propagate External Parameters!Data Type Manager - Apply Function Data Types, One Shot|book{2}}{48}
\indexentry{Ghidra!OneShot!Propagate External Parameters|book{2}}{48}
\indexentry{Ghidra!Apply Function Data Types|book{2}}{48}
\indexentry{XOR!Exclusive OR!Only true (nonzero) if two operands differ. XOR EDI EDI = 0|book{2}}{49}
\indexentry{Ghidra!Data Convert|book{2}}{49}
\indexentry{Symbolic Constants!Visual Studio SDK!Load WinInet.h header file|book{2}}{49}
\indexentry{Ghidra!Parse C Source!Resolving Symbolic Constants that Ghidra is unsure of|book{2}}{49}
\indexentry{Ghidra!Data / String!lpszVerb-00413d8c pointer to a string right click, data, string|book{2}}{49}
\indexentry{Ghidra!Function Graph - Red/Green Arrow!Red Arrow = Unsuccessful (FALSE), Green Arrow = Successful (TRUE)|book{2}}{53}
\indexentry{Variable!Represents some piece of information (code or data) without knowing actual contents (local_ac0)|book{2}}{54}
\indexentry{Variable Types!Local, Global, Static|book{2}}{54}
\indexentry{Variable!Local!Variable accessible by function that allocates it. Function exits, code free to be reused|book{2}}{54}
\indexentry{Variable!Global!Used anywhere and referenced using an address|book{2}}{54}
\indexentry{Variable!Static!Used within function allocates it, cannot be reused, not referenced in Stack|book{2}}{54}
\indexentry{Variable!Access Restrictions!enforced by the compiler not the CPU|book{2}}{54}
\indexentry{Ghidra!Function Call HTTP C2 APIs!Outgoing Call of the same Windows API|book{2}}{56}
\indexentry{Ghidra!Renaming Functions!Right click Function - Edit Label|book{2}}{57}
\indexentry{Ghidra!Function Size!Number of bytes comprise the function, more work to reverse|book{2}}{58}
\indexentry{Ghidra!Interpret Arguments!Double click lpPrefixString_00413d04 - right click DAT label, data, TerminatedUnicode|book{2}}{63}
\indexentry{Ghidra!Bytes to ASCII!00 bytes between each character means Unicode String|book{2}}{63}
\indexentry{Functions!group of instructions/code that performs a tasks, send data, log keystrokes, r/w files|book{2}}{65}
\indexentry{Functions!Three components!Input passed into function from caller, body of function code perform task, value returned from function|book{2}}{65}
\indexentry{Function!Calling!branch (jump to another location), executing CPU processes instructions|book{2}}{65}
\indexentry{Function!Calling Control Transfers!Calling Function (Pass in parameters, save return pointer, transfer control function)|book{2}}{66}
\indexentry{Function!Returning Control Transfers!Returning Function (Set return value EAX, clean stack restore registers, transfer control saved return pointer)|book{2}}{66}
\indexentry{Function!Prologue!Prologue (allocates space for variables, saves registers reused in function body) (MOV EDI, EDI - NOP instruction)|book{2}}{67}
\indexentry{Function!Epilogue!Epilogue (cleans up stack eg POP variables, restores registers)|book{2}}{67}
\indexentry{Function!Hot patching!2byte MOV EDI, EDI NOP instruction - without need to stop and restart the program|book{2}}{67}
\indexentry{Function!Hot Patching - ShortLong Jumping!2-byte relative jump transfers control to another jump anywhere in memory, 5-byte long jump is 5 NOP instructions|book{2}}{67}
\indexentry{Stack!How it works!LIFO, PUSH, POP, ESP Stack Point, EBP Frame Point (EBP -8 accessing local Variable, EBP +8 referencing parameter) Compilers pop value off stack|book{2}}{68-69}
\indexentry{Stack!Last In, First Out|book{2}}{68-69}
\indexentry{ESP Stack Pointer register top of stack Push Pop|book{2}}{68}
\indexentry{EBP Frame Pointer -8 access local var +8 reference parameter|book{2}}{68}
\indexentry{Stack! example how it works|book{2}}{69-70}
\indexentry{Calling convention!how data gets in and out of functions, code block calls function and performing housekeeping|book{2}}{72}
\indexentry{Calling convention!cdecl!Args passed to function pushed onto stack right to left. Return value is in EAX register, code block calls function to clean up ie printf()|book{2}}{72}
\indexentry{Calling convention!stdcall!Calling functions in WIN32 API, function itself responsible removing args pass in stack, smaller code size.|book{2}}{72}
\indexentry{Calling convention!fastcall!Args stored in registers, extra Args placed in stack, callee responsible cleaning stack, return value is EAX. ECX and EDX pass args|book{2}}{73}
\indexentry{Calling convention!thiscall!includes reference this pointer, Microsoft ECX holds this pointer and callee cleans args on stack, GNU this pointer pushed to stack last and caller cleans|book{2}}{73}
\indexentry{Calling convention!cdecl!how it works|book{2}}{74}
\indexentry{Calling convention!stdcall!how it works|book{2}}{74}
\indexentry{Calling convention!fastcall!how it works|book{2}}{75}
\indexentry{Calling convention!thiscall!how it works|book{2}}{75}
\indexentry{Stack Optimisation!PUSH subtracts 4 from ESP value at location - MOV place value on stack but does not subtract from ESP|book{2}}{76}
\indexentry{Small Code Base!Benefits!Increasing modularity, drawback additional overhead|book{2}}{77}
\indexentry{Inlined Functions!Body of function placed in block code that calls function. no extra overhead entering/exiting. String related function strlen strcmp|book{2}}{77}
\indexentry{strlen example|book{2}}{78}
\indexentry{Inlined Functions strlen example|book{2}}{78}
\indexentry{Exercise 2.3!Knowledge of Functions!Locations of functions, number of args, number of local vars, instructions comprise pro/epi, calling convention used|book{2}}{79}
\indexentry{Exercise 2.3!How many Locations|book{2}}{80}
\indexentry{Exercise 2.3!How many Arguments|book{2}}{80-81}
\indexentry{Exercise 2.3!How many Local Variables|book{2}}{82}
\indexentry{Exercise 2.3!Which instruction comprises the prologue(PUSH,MOV,SUB)|book{2}}{83}
\indexentry{Exercise 2.3!Which instruction comprises the epilogue(LEAVE,RET)|book{2}}{84}
\indexentry{Exercise 2.3!What calling convention does FUN_4064c8 uses (cdecl)|book{2}}{85}
\indexentry{Exercise 2.3!How many Locations|book{2}}{88}
\indexentry{Exercise 2.3!How many Arguments and Local Variables|book{2}}{89}
\indexentry{Exercise 2.3!Which instruction comprises the prologue(PUSH,MOV,SUB,PUSH,PUSH,PUSH)|book{2}}{90}
\indexentry{Exercise 2.3!Which instruction comprises the epilogue(POP,POP,MOV,POP,LEAVE,RET)|book{2}}{91}
\indexentry{Exercise 2.3!What calling convention does FUN_4064c8 uses (cdecl)|book{2}}{85}
\indexentry{Stack!ADD ESP 0x1c after CALL cleaning stack|book{2}}{92}
\indexentry{Ghidra!Data Structure!individual elements called members|book{2}}{94}
\indexentry{Ghidra!Process Information Structure!similar to Data Structure|book{2}}{94}
\indexentry{Ghidra!Local Variable Conflict|book{2}}{94}
\indexentry{If-Else|book{2}}{99-100}
\indexentry{If-ElseIf-Else|book{2}}{101-102}
\indexentry{If-ElseIf-Else Statements (Switch)!Nested. Switch statements are the same but different Syntax|book{2}}{101-102}
\indexentry{Ghidra!Defined Strings - show references!Right Click on Label (Application_00413e34) References - Show References |book{2}}{103}
\indexentry{Ghidra!Defined Strings|book{2}}{103}
\indexentry{Ghidra!Defined Strings!reveals filenames and directories of interest|book{2}}{104}
\indexentry{Ghidra!Defined Strings!locate reference to string|book{2}}{105}
\indexentry{Ghidra!XREF!Same as right click Reference and Show References|book{2}}{106}
\indexentry{Ghidra!JC Jump if carry - Table of Strings (Loop)!ADD ESI, 0x4 - 4 bytes, CMP ESI, 0x38 - 56 bytes (total number of strings in table 4 bytes per one)|book{2}}{106}
\indexentry{Ghidra!Strings - Group with a Loop!dword ptr [ESI + PTR_u_Windows_00418cd8] ESI 0 = Windows, ESI 4 = Boot, ESI 8 = System. Table of Strings |book{2}}{106}
\indexentry{Loops!Appear in Malware!Encrypt/Decrypt, C2, Port Scan, DDOS, Log Keys|book{2}}{108}
\indexentry{Loops / Loopcc!Max jump range of 128 bytes, loopnz, ZF bit in flags register|book{2}}{109}
\indexentry{Loops to execute single code JZ JNZ JE|book{2}}{109}
\indexentry{Loops!five major components!Control Variable, Loop initialization, Loop body, Loop update, Stopping conditions|book{2}}{110}
\indexentry{strlen!analysis example|book{2}}{111}
\indexentry{Loops!Loop Example - strlen|book{2}}{111}
\indexentry{Loops!Common types!for loop (init, stop, update conditions) while loop (init is separate from stopping condition and update control variables in body of loop) do while loop (same as while but gets executed least once before condition)|book{2}}{112}
\indexentry{Loops!For (loop)|book{2}}{112}
\indexentry{Loops!While (loop)|book{2}}{112}
\indexentry{Loops!Do while (loop)|book{2}}{112}
\indexentry{Loops!For (loop) example|book{2}}{113}
\indexentry{Loops!While (loop) example|book{2}}{114}
\indexentry{Exercise 2.5!Loop analysis!assess stopping condition(CMP, JC)|book{2}}{116}
\indexentry{Exercise 2.5!Loop analysis!control variable before stopping condition(ADD instruction)|book{2}}{117}
\indexentry{Exercise 2.5!Loop analysis!control variable before the loop (XOR ESI,ESI|book{2}}{118}
\indexentry{Exercise 2.5!Loop analysis!loop body by the stopping condition|book{2}}{119}
\indexentry{Exercise 2.5!Loop analysis!decompiler output|book{2}}{120}
\indexentry{Loops - Exercise 2.5|book{2}}{120}
\indexentry{Simple expressions!single condition|book{2}}{123}
\indexentry{Compound (complex) Expressions!multiple conditions|book{2}}{123}
\indexentry{Short circuit evaluation!skips a code block Boolean and fails or succeeds|book{2}}{123}
\indexentry{Expressions!Compound Expression (AND)!if ( a < 4 ) && ( a > 1 ) = if a is less than 4 AND greater than 1|book{2}}{124}
\indexentry{Expressions!Compound Expression (OR)!if ( a < 4 ) || ( a > 10 ) = if a is less than 4 OR greater than 10 |book{2}}{125}
\indexentry{Expressions!< less than!if ( a < 4 ) = if a is less than 4 (JNL jump if not less than)|book{2}}{124}
\indexentry{Jumps!JNL Jump!if ( a < 4 ) = if a is less than 4 (JNL jump if not less than)|book{2}}{124}
\indexentry{Jumps!Jump - JNL!if ( a < 4 ) = if a is less than 4 (JNL jump if not less than)|book{2}}{124}
\indexentry{Expressions!> greater than!( a > 1 ) if a is greater than 1 (JNG jump if greater than)|book{2}}{124}
\indexentry{Jumps!JNG Jump!( a > 1 ) if a is greater than 1 (JNG jump if greater than)|book{2}}{124}
\indexentry{Jumps!ump - JNG!( a > 1 ) if a is greater than 1 (JNG jump if greater than)|book{2}}{124}
\indexentry{Jumps!Jump - If not below zero example(JZ / JNC)!JNC = CMP EAX, EDI, if EAX is larger than EDI size of buffer, buffer is too small and will error|book{2}}{128}
\indexentry{Switch Statements - How it works!enables one of many code blocks to be executed based on integer value of a variable. code blocks terminate break statement|book{2}}{130}
\indexentry{Break statements|book{2}}{130}
\indexentry{Jump table|book{2}}{131}
\indexentry{Jump Tables - Optimization Technique!list of address of each code block (an array) -  |book{2}}{131}
\indexentry{Switch Statement - C to assembly|book{2}}{132}
\indexentry{DLL|book{2}}{137}
\indexentry{DLL!how it works!library to help share code with multiple programs, export functions, need EXE to load, etc|book{2}}{137}
\indexentry{DLL needs EXE to load it into memory exports functions share code with multiple programs|book{2}}{137}
\indexentry{PeStudio!DLL file (Exports)!entry point (address of first instruction to execute), (Malware use) Ordinal alt method export/import functions, setting function|book{2}}{138}
\indexentry{PeStudio!Exports|book{2}}{138}
\indexentry{Dropper|book{2}}{140}
\indexentry{Ghidra!Windows API (Find/Size/Lock Resource)!Nearby calls to WriteFile/CreateProcess, malware extracts resource writes to disk|book{2}}{140}
\indexentry{FindRes, LoadRes, SizeRes, LockRes, WriteFil, CreateProcess - Dropper|book{2}}{140}
\indexentry{PeStudio!(Resource executable)!dump MZ filebook{2}}{142}
\indexentry{MZ!Windows Executable|book{2}}{142}
\indexentry{Mutex|book{2}}{143}
\indexentry{Ghidra!Windows API (CreateMutexA)|book{2}}{143}
\indexentry{Ghidra!Windows API (KeyState, WindowText,Clipboard)!malware collecting information and keylogging|book{2}}{144}
\indexentry{Windows API Calls!GetKeyState!retrieves status of specified key|book{2}}{144}
\indexentry{Windows API Calls!GetAsyncKeyState!key is currently down or up, was pressed, last call to GetAsyncKeyState|book{2}}{144}
\indexentry{Windows API Calls!GetWindowText!obtains text of windows title bar combined with keystate APIs, keys logged and in what window|book{2}}{144}
\indexentry{Windows API Calls!OpenClipboard!access to clipboard and locks access|book{2}}{144}
\indexentry{Windows API Calls!GetClipboardData!gathers data from clipboard, usernames,passwords and other data|book{2}}{144}
\indexentry{Windows API Calls!CloseClipboard!closes the clipboard|book{2}}{144}
\indexentry{CFF Explorer - Static analyzer extract files!extract file and code analysis|book{2}}{145}
\indexentry{64-bit malware!Two types, Browser Helper Objects (BHO) Device Drivers (rootkits)|book{2}}{148}
\indexentry{Browser Helper Objects (BHOs)!Internet Explorer (64bit) wont load 32bit vice verse|book{2}}{148}
\indexentry{Device Drivers (rootkits)!Digitally signed trusted cert, TDL bypass|book{2}}{148}
\indexentry{RootKits!Digitally signed trusted cert, TDL bypass|book{2}}{148}
\indexentry{TDL RootKit!Digitally signed trusted cert, TDL bypass|book{2}}{148}
\indexentry{WOW64 Subsystem!Windows on Windows, NTVDM, 32bit DLLs %SystemRoot%\Syswow64, Wow6432Node registry|book{2}}{149}
\indexentry{NTVDM (NT Virtual DOS Machine)|book{2}}{149}
\indexentry{64bit Assembly Registers!Whats the difference|book{2}}{150}
\indexentry{Registers!(64bit) (General Purpose)!RAX, RBX, RCX, RDX and R8 through R15|book{2}}{150}
\indexentry{Registers!(64bit) (Special Use) - RIP!RIP reference memory locations|book{2}}{150}
\indexentry{Registers!(64bit) - Calling convention (fastcall)!First four parameters passed RCX, RDX, R8, R9. Additional parameters stored on stack|book{2}}{150}
\indexentry{bit@64-bits|book{2}}{150}
\indexentry{RIP-relative addressing|book{2}}{150}
\indexentry{RSP stack pointer instead of EBP|book{2}}{150}
\indexentry{Position-independent code (PIC)|book{2}}{150}
\indexentry{Windows Loader fixup|book{2}}{150}
\indexentry{Registers!(64bit Architecture)!RAX-EAX-AX-AH-AL|book{2}}{151}
\indexentry{Registers!(64bit Architecture) R9 Register!R9 - R9D - R9W - R9B|book{2}}{152}
\indexentry{Exercise 2.8!64bit DLL Ghidra!ShellExecuteW, SUB RSP, 0x658 start of code block, LEA places pointers |book{2}}{156}
\indexentry{Registers!(64bit) RSP!SUB RSP, 0x658 used to make room on stack for local variables. RBP is not used|book{2}}{155}
\indexentry{Assembly Instructions!(64bit) SUB!SUB RSP, 0x658, start of prologue, makes room on stack for local variables|book{2}}{156}
\indexentry{RCX RDX R8 R9 order|book{2}}{156}
\indexentry{=> Operand!LEA R9=>local_628 - loading the address of local_628 into R9|book{2}}{156}
\indexentry{Operand =>!LEA R9=>local_628 - loading the address of local_628 into R9|book{2}}{156}
\indexentry{Ghidra!=> operand!LEA R9=>local_628 - loading the address of local_628 into R9|book{2}}{156}
\indexentry{Arguments passed in registers on the stack|book{2}}{156}
\indexentry{Arguments!64bits RCX RDX R8 R9|book{2}}{156}
\indexentry{Square Brackets [EBP + 0x10]!Indirect Memory Addressing, [EBP + 0x10] access data on stack,|book{2}}{33}
\indexentry{[EBP + 0x10]!Indirectly memory addressing|book{2}}{156}
\indexentry{Arguments!32bits PUSH above CALL|book{2}}{156}
\indexentry{Decompiler vs Dissassembly|book{2}}{159}
\indexentry{Ghidra!local_628 decompiler!Use decompiler if possible to assist|book{2}}{159}
\indexentry{Registers!32bit compared to 64bit!InternetOpenUrlA - Windows API|book{2}}{160}
\indexentry{Code Analysis - Imports, Strings, Functions|book{2}}{162}
\indexentry{Windows API Calls!InternetOpenUrlA!64bit RCX, RDX, R8, R9 detailed|book{2}}{167}
\indexentry{Keylogger Capabilities|book{2}}{171}
\indexentry{Windows API Calls!(GetKeyState)(GetAsyncKeyState)(SetWindowsHookEx)!Two Common Methods for collecting keystrokes|book{2}}{171}
\indexentry{Windows Hooks!Hooking Procedures!used to monitor events - mouse movements, key presses, window interactions|book{2}}{173}
\indexentry{Windows API Calls!SetWindowsHookEx!used to install hook procedure, args to function type messages, mouse events, keyboard|book{2}}{173}
\indexentry{WH_KEYBOARD_LL Symbolic Constant 0D - Dec 13|book{2}}{175}
\indexentry{WH_KEYBOARD|book{2}}{175}
\indexentry{Windows API Calls!SetWindowsHookEx Arguments!idHook, lpfn, hMod, dwThreadId|book{2}}{175}
\indexentry{WH_CBT|book{2}}{175}
\indexentry{fn callback function!nCode, wParam, lParam, WM-KEYDOWN,UP,SYSKEYDOWN,UP|book{2}}{179}
\indexentry{nCode!CallNextHookEx - if zero|book{2}}{179}
\indexentry{virtual-key codes|book{2}}{179}
\indexentry{Windows API Calls!GetAsyncKeyState!How the function works - KBDLLHOOKSTRUCT|book{2}}{180}
\indexentry{KBDLLHOOKSTRUCT!How this function works|book{2}}{180}
\indexentry{MSB!Most significant bit|book{2}}{182}
\indexentry{Assembly Instructions!ADD (MSB)!MSB, Most significant bit, unsigned/signed binary math|book{2}}{182}
\indexentry{Most significant bit (MSB)|book{2}}{182}
\indexentry{Signed binary math|book{2}}{182}
\indexentry{Unsigned binary math|book{2}}{182}
\indexentry{Assembly Instructions!ADD interpretations!How it works in detail|book{2}}{183}
\indexentry{Jump instruction (JMP)directs execution to different code blocks depending on value of EAX|book{2}}{184}
\indexentry{JMP instruction!directs execution to different code blocks depending on value of EAX|book{2}}{184}
\indexentry{Jump table|book{2}}{184}

\comment{********************************************************************************************
                                     THIRD BOOK SECTION
*****************************************************************************************************}
\indexentry{PDF!How it works!exploit vulns, ASCII keywords, JavaScript, Links, |book{3}}{4}
\indexentry{PDF!Risky Keywords!/JS, /JavaScript, /AcroForm, /XFA, /Launch, /EmbeddedFiles, /OpenAction, /AA, /URI, /SubmitForm|book{3}}{4}
\indexentry{PDF!XFA!Execute embedded javascript|book{3}}{4}
\indexentry{PDF!AcroForm!Execute embedded javascript|book{3}}{4}
\indexentry{PDF!EmbeddedFiles!Launching external or embedded programs|book{3}}{4}
\indexentry{PDF!Launch!Launching external or embedded programs|book{3}}{4}
\indexentry{PDF!OpenAction!action automatically when pdf is open|book{3}}{4}
\indexentry{PDF!AA!action automatically when pdf is open|book{3}}{4}
\indexentry{PDF!URI!interact with websites (URL)|book{3}}{4}
\indexentry{PDF!SubmitForm!interact with websites (URL)|book{3}}{4}
\indexentry{PDF!Elements!header (version specs), objects (text, fonts, graphics, JS), xref (modify without rewriting file), trailer (metadata and file specs)|book{3}}{5}
\indexentry{PDF!header!version specs|book{3}}{5}
\indexentry{PDF!objects!text, fonts, graphics, JS|book{3}}{5}
\indexentry{PDF!xref!modify without rewriting file|book{3}}{5}
\indexentry{PDF!trailer!metadata and file specs|book{3}}{5}
\indexentry{PDF!Objects!reference each other and specify actions|book{3}}{6}
\indexentry{PDF!Indirect Object References!/AA (AutoAction) /O (when file is opened) 43 0 R (Reference Object 43)|book{3}}{6}
\indexentry{PDF!Encode Streams!/FlateDecode stream encoded contents endstream|book{3}}{8}
\indexentry{PDF!/Filter /FlateDecode!Stream - encoded contents - endstream|book{3}}{8}
\indexentry{PDFid|book{3}}{8}
\indexentry{PDFid!OpenAction!automatically initiate risky actions |book{3}}{8}
\indexentry{PDFid!-n!Only show non-zero keywords and outputs|book{3}}{29}
\indexentry{PDFid!URI!clickable URLS|book{3}}{8}
\indexentry{PDFid!ObjStm Object Stream!Object stream that contains other object - indirect objects , stream compression filters|book{3}}{29}
\indexentry{PDF-Parser!how it works|book{3}}{9}
\indexentry{PDF-Parser!/URI!PDF type known as dictionary. key-value pairs|book{3}}{9}
\indexentry{PDF-Parser!/XObject!Embedded Objects ie: image with clickable link|book{3}}{9}
\indexentry{PDF-Parser!steel1.pdf -a!-a displays statistics about keywords in file|book{3}}{12}
\indexentry{PDF-Parser!steel1.pdf -s /URI | more!-s parameter searches file for objects with /URI|book{3}}{12}
\indexentry{PDF-Parser!steel1.pdf -k /URI!-k parameter shows values with associated KEY /URI (multiple URIs)|book{3}}{12}
\indexentry{PDF-Parser!/XObject!Images embedded into the PDF|book{3}}{12}
\indexentry{PDF-Parser!/XForm!Images embedded into the PDF|book{3}}{12}
\indexentry{PDF-Parser!steel1.pdf  -o 6!Examine specific object number|book{3}}{13}
\indexentry{PDF-Parser!/Image within /XObject!/Type /XObject - /Subtype /Image (confirms contains image)|book{3}}{13}
\indexentry{PDF-Parser!Streams!store data, scripts such as text, font definitions, images. encoded but decoded by applying /Filter|book{3}}{13}
\indexentry{PDF-Parser!/DCTDecode!Stream contains Image can be decoded using /DCTDecode, standard for JPEG|book{3}}{13}
\indexentry{PDF-Parser!steel1.pdf -o 6 -d object6.jpg!-o 6 select object 6 -d extract it and dump to file|book{3}}{14}
\indexentry{PDF-Parser!steel2.pdf -O -a!scans inside /ObjStm objects to find more objects|book{3}}{30}
\indexentry{PDF-Parser!export PDFPARSER_OPTIONS=-O!similar to -O parameter|book{3}}{30}
\indexentry{feh Image Viewer|book{3}}{14}
\indexentry{PDF-Parser!steel1.pdf -r 6!Follow the trail of references |book{3}}{15}
\indexentry{PDF-Parser!-r Reference object to objects|book{3}}{15}
\indexentry{PDF-Parser!/Annots /Page!/Type /Page / Annots have interactive capabilities - popup notes, clickable links|book{3}}{16}
\indexentry{PDF-Parser!/Annots|book{3}}{16}
\indexentry{PDF-Parser!/Page|book{3}}{16}
\indexentry{Websites - Ways to investigate|book{3}}{19}
\indexentry{Exploit Kit!automate exploit of client side vulns|book{3}}{19}
\indexentry{Network Sniffer|book{3}}{19}
\indexentry{Web Proxy|book{3}}{19}
\indexentry{Fiddler!Network Sniffer and Web Proxy|book{3}}{19}
\indexentry{Burp!Network Sniffer and Web Proxy|book{3}}{19}
\indexentry{wget!same as curl, used to download files using CLI|book{3}}{19}
\indexentry{wget!~/.wgetrc!wget config files to spoof HTTP headers|book{3}}{19}
\indexentry{wget!on steriods|book{3}}{19}
\indexentry{curl!same as wget, used to download files using CLI|book{3}}{19}
\indexentry{curl!~/.curlrc!curl config files to spoof HTTP headers|book{3}}{19}
\indexentry{Spoof HTTP Headers|book{3}}{19}
\indexentry{Pinpoint!wget on steroids|book{3}}{19}
\indexentry{Scout!wget on steroids|book{3}}{19}
\indexentry{Thug!honeyclient , mimic a web browser, executing javascript, emulating web browser|book{3}}{19}
\indexentry{Thug!Honeyclient|book{3}}{19}
\indexentry{Thug!client-side JavaScript|book{3}}{19}
\indexentry{Thug!Emulating browser|book{3}}{19}
\indexentry{Fiddler!steel.saz file types!saz file types is a Fiddler capture file|book{3}}{20}
\indexentry{Fiddler!Response raw tab!example|book{3}}{22}
\indexentry{Fiddler!Expect-CT Response!Common CloudFlare Websites minimize risk of misused SSL certificates|book{3}}{22}
\indexentry{Fiddler!Request!|book{3}}{23}
\indexentry{pdf-parser!steel2.pdf -O -k!/URI!Looks inside the /ObjStm and searches for all URIs|book{3}}{31}
\indexentry{Fiddler!Extract Artifacts!|book{3}}{23}
\indexentry{PDF-Parser!/XObject embedded image|book{3}}{32}
\indexentry{PDF-Parser!Javascript /JS /AcroForm /XFA|book{3}}{35}
\indexentry{PDF Password Encrypted|book{3}}{35}
\indexentry{qpdf!PDF Password Encrypted (decrypt)|book{3}}{35}
\indexentry{pdftk!PDF Password Encrypted (decrypt)|book{3}}{35}
\indexentry{PDF-Parser! -f -w -d!dump stream to file|book{3}}{35}
\indexentry{VBA Macro Password Protected|book{3}}{37}
\indexentry{Malicious VBA Macros|book{3}}{37}
\indexentry{Office Documents!VBA Macros!embedded macros in a file|book{3}}{37}
\indexentry{Office Documents!OLE2 - Object Linking and Embedding!Considered to be Legacy format.|book{3}}{38}
\indexentry{Office Documents!OLE2 - Structure Storage!defines how to treat a single file entity.|book{3}}{38}
\indexentry{Office Documents!OLE2 - Compound File Binary Format CFBF|book{3}}{38}
\indexentry{Office Documents!OLE2 - Compound Document File V2 CDFV2|book{3}}{38}
\indexentry{Office Documents!XML|book{3}}{38}
\indexentry{Office Documents!Open Office XML OOXML|book{3}}{38}
\indexentry{XML|book{3}}{38}
\indexentry{OLE2! Macros|book{3}}{38}
\indexentry{Open Office XML OOXML! 4 letter extension|book{3}}{38}
\indexentry{Open Office XML OOXML! Macro follow OLE2 format|book{3}}{38}
\indexentry{p-code compressed and compiled|book{3}}{38}
\indexentry{file|book{3}}{39}
\indexentry{trid|book{3}}{39}
\indexentry{Office Documents!Macros have been disabled - Enable Content|book{3}}{40}
\indexentry{zipdump!Extracting individual files|book{3}}{41}
\indexentry{zipdump!zipdump.py particulars.doc|book{3}}{41}
\indexentry{zipdump!zipdump.py particulars.doc -s 5 -d > image1.jpg!-s specify object with file -d dump the file > filename|book{3}}{41}
\indexentry{feh!image1.jpg &|book{3}}{41}
\indexentry{olevba!locate decode extract tool good for auto scanning files|book{3}}{43}
\indexentry{olevba!olevba particulars.doc > particulars.olevba|book{3}}{43}
\indexentry{olevba!risky capabilities!AutoOpen - runs when document is opened|book{3}}{43}
\indexentry{olevba!risky capabilities!URLDownloadToFileA - download files from internet|book{3}}{43}
\indexentry{olevba!risky capabilities!StrReverse - obfuscate strings -deobf|book{3}}{43}
\indexentry{olevba!risky capabilities!exec - run an executable file or command using XLM/XLF|book{3}}{43}
\indexentry{olevba!risky capabilities!Hex Strings - Hex-encoded strings|book{3}}{43}
\indexentry{olevba!risky capabilities!Call - call a DLL using XLM/XLF|book{3}}{43}
\indexentry{olevba!AutoOpen function example|book{3}}{44}
\indexentry{oledump!OLE2!examining structure and contents of OLE2 files|book{3}}{45}
\indexentry{oledump!oledump.py particulars.doc -i!examine contents OLE2 in particulars.doc|book{3}}{45}
\indexentry{oledump!Uppercase M!means Macro inside that object|book{3}}{45}
\indexentry{oledump!791+62!Size os compiled code and size of compressed code|book{3}}{45}
\indexentry{oledump!numbers-to-string.py -j join|book{3}}{57}
\indexentry{oledump!oledump.py particulars.doc -s a -v pipe more!-s a Extracts VBA Macros from ALL streams|book{3}}{46}
\indexentry{oledump!oledump.py particulars.doc -s a -v pipe grep -v "^'" pipe more!-v to grep eliminate lines that match regex. ^ is start of line and matches '' |book{3}}{47}
\indexentry{oledump!grep!Extracts lines that start with a keyword in ""|book{3}}{49}
\indexentry{oledump!Concealed,obfuscated URL inside Dim array1(12) 12 lines|book{3}}{48}
\indexentry{oledump!re-search.py -n str-u\!Extracts strings within the ""|book{3}}{49}
\indexentry{oledump!sets.py join "" \!Join lines into a single line|book{3}}{49}
\indexentry{oledump!sed "ss/====//g"!Remove ==== separators|book{3}}{49}
\indexentry{oledump!Public Const zM As String = "-----"book{3}}{50}
\indexentry{oledump!nh = Split(Replace(pn(array1), Fw, ""), zM)book{3}}{50}
\indexentry{oledump!Macro decoded using strings!Function DU(yI) array1 = Xf book{3}}{50}
\indexentry{oledump!StrReverse!Function U5 Macro|book{3}}{52}
\indexentry{oledump!regsvr32!Function U5 Macro|book{3}}{52}
\indexentry{oledump!LOLBINs|!Function U5 Macrobook{3}}{52}
\indexentry{Exercise 3.4!oledump OLE2!examining structure and contents of OLE2 files|book{3}}{45}
\indexentry{Exercise 3.4!oledump particulars.doc -i!examine contents OLE2 in particulars.doc|book{3}}{45}
\indexentry{Exercise 3.4!oledump Uppercase M!means Macro inside that object|book{3}}{45}
\indexentry{Exercise 3.4!oledump 791+62!Size os compiled code and size of compressed code|book{3}}{45}
\indexentry{Exercise 3.4!oledump numbers-to-string.py -j join|book{3}}{57}
\indexentry{Exercise 3.4!oledump particulars.doc -s a -v pipe more!-s a Extracts VBA Macros from ALL streams|book{3}}{46}
\indexentry{Exercise 3.4!oledump particulars.doc -s a -v pipe grep -v "^'" pipe more!-v to grep eliminate lines that match regex. ^ is start of line and matches '' |book{3}}{47}
\indexentry{Exercise 3.4!oledump grep!Extracts lines that start with a keyword in ""|book{3}}{49}
\indexentry{Exercise 3.4!oledump Concealed,obfuscated URL inside Dim array1(12) 12 lines|book{3}}{48}
\indexentry{Exercise 3.4!oledump re-search.py -n str-u\!Extracts strings within the ""|book{3}}{49}
\indexentry{Exercise 3.4!oledump sets.py join "" \!Join lines into a single line|book{3}}{49}
\indexentry{Exercise 3.4!oledump sed "ss/====//g"!Remove ==== separators|book{3}}{49}
\indexentry{Exercise 3.4!oledump Public Const zM As String = "-----"book{3}}{50}
\indexentry{Exercise 3.4!oledump nh = Split(Replace(pn(array1), Fw, ""), zM)book{3}}{50}
\indexentry{Exercise 3.4!oledump Macro decoded using strings!Function DU(yI) array1 = Xf book{3}}{50}
\indexentry{Exercise 3.4!oledump StrReverse!Function U5 Macro|book{3}}{52}
\indexentry{Exercise 3.4!oledump regsvr32!Function U5 Macro|book{3}}{52}
\indexentry{Exercise 3.4!oledump LOLBINs|!Function U5 Macrobook{3}}{52}
\indexentry{oledump!SRP!contained cached compiled copy of the VBA Macro can reveal aftifacts from previous version|book{3}}{53}
\indexentry{SRP!Strings or oledump!look for ASCII and Unicode strings or oledump to extract|book{3}}{53}
\indexentry{exiftool!extracts metadata and can include other details about the document|book{3}}{53}
\indexentry{xmldump pretty|book{3}}{54}
\indexentry{zipdump!xmldump pretty!|book{3}}{54}
\indexentry{zipdump!particulars.doc -s 9 -d pip xmldump.py pretty pipe more!|book{3}}{54}
\indexentry{ViperMonkey|book{3}}{55}
\indexentry{vmonkey|book{3}}{55}
\indexentry{VBA Emulation|book{3}}{55}
\indexentry{numbers-to-string.py -j join|book{3}}{57}
\indexentry{Netcat|book{3}}{60}
\indexentry{PowerShell|book{3}}{61}
\indexentry{Password Protected VBA Macro|book{3}}{65}
\indexentry{grep! -v ":DollarSign" colon end of line|book{3}}{66}
\indexentry{grep! -v "^goto" remove lines start goto|book{3}}{66}
\indexentry{Hextostring|book{3}}{67}
\indexentry{XORI - XOR{3}}{67}
\indexentry{xor-kpa.py{3}}{69}
\indexentry{xor-kpa.py{3}}{70}
\indexentry{oledump!plugin_http_heuristics|book{3}}{71}
\indexentry{evilclippy doc pass removal|book{3}}{72}
\indexentry{VBA Debugging|book{3}}{72}
\indexentry{VBA Debugging!Debug.Assert False|book{3}}{73}
\indexentry{p-code|book{3}}{77}
\indexentry{olevba!VBA Stomping|book{3}}{77}
\indexentry{VBA Stomping|book{3}}{77}
\indexentry{oledump!-i information data structure|book{3}}{78}
\indexentry{oledump!example VBA stomping|book{3}}{78}
\indexentry{VBA Tampering|book{3}}{78}
\indexentry{oledump!unable to decompress|book{3}}{79}
\indexentry{oledump!s suffix source|book{3}}{79}
\indexentry{oledump!-A parameter show Hex values and ASCII|book{3}}{79}
\indexentry{oledump!c suffix compiled|book{3}}{79}
\indexentry{pcodedmp.py|book{3}}{79}
\indexentry{pcodedmp.py disassemble VBA p-code|book{3}}{80}
\indexentry{pcode2code|book{3}}{81}
\indexentry{oledump!CDFV2 Compound Document Format|book{3}}{84}
\indexentry{oledump!VBA Purging|book{3}}{85}
\indexentry{VBA Purging removes p-code|book{3}}{85}
\indexentry{VBA Stomping removes source code |book{3}}{85}
\indexentry{PowerShell!-nop -NoProfile|book{3}}{86}
\indexentry{PowerShell!-w hidden -WindowsStyle hidden|book{3}}{86}
\indexentry{PowerShell!-encoded -EncodedCommand -NoProfile|book{3}}{86}
\indexentry{oledump!-S parameter extract Strings|book{3}}{87}
\indexentry{base64dump.py|book{3}}{88}
\indexentry{oledump!-d dump contents stream|book{3}}{88}
\indexentry{base64dump.py!-s select string|book{3}}{88}
\indexentry{base64dump.py!-a view contents of string|book{3}}{88}
\indexentry{base64dump.py!"." right side output Unicode UTF-16 char two bytes|book{3}}{88}
\indexentry{UTF-16|book{3}}{89}
\indexentry{base64dump.py!-t utf16 convert to UTF-16|book{3}}{89}
\indexentry{PowerShell!DollarSign s Variable saves command|book{3}}{89}
\indexentry{PowerShell!GzipStream decompress contents|book{3}}{89}
\indexentry{PowerShell!IEX Invoke-Expression execute decompressed commands|book{3}}{89}
\indexentry{base64dump.py!scans code for base64|book{3}}{90}
\indexentry{base64dump.py!-s parameter select string|book{3}}{90}
\indexentry{base64dump.py!-d parameter dump decoded string|book{3}}{90}
\indexentry{base64dump.py!gunzip process|book{3}}{90}
\indexentry{shellcode|book{3}}{93}
\indexentry{shellcode!extract strings|book{3}}{93}
\indexentry{shellcode!emulate execution|book{3}}{93}
\indexentry{shellcode!disassemble|book{3}}{93}
\indexentry{shellcode!debug|book{3}}{93}
\indexentry{base64dump.py!-n 10 only consider strings 10 bytes long|book{3}}{90}
\indexentry{translate.py used to decode XOR Strings|book{3}}{93}
\indexentry{XOR = ^ in bash command|book{3}}{93}
\indexentry{scdbg shellcode emulator|book{3}}{94}
\indexentry{scdbgc|book{3}}{94}
\indexentry{scdbgc!/f parameter select file|book{3}}{94}
\indexentry{scdbgc!/s 1 no limits on steps|book{3}}{94}
\indexentry{yara-rules|book{3}}{95}
\indexentry{Cobalt Strike|book{3}}{95}
\indexentry{1768.py|book{3}}{95}
\indexentry{RTF|book{3}}{100}
\indexentry{RTF Risks|book{3}}{100}
\indexentry{RTF Rich Text File|book{3}}{100}
\indexentry{RTF Risks!dont support macros|book{3}}{100}
\indexentry{RTF Risks!allow arbitrary files|book{3}}{100}
\indexentry{RTF Risks!OLE1 Packager Object Server|book{3}}{100}
\indexentry{RTF Risks!Javascript / VBScript|book{3}}{100}
\indexentry{RTF Risks!extract embedded object percent temp percent execute|book{3}}{100}
\indexentry{RTF Risks!Vulnerability Exploit execute shellcode assembly instructions|book{3}}{100}
\indexentry{RTF!control word \ character|book{3}}{101}
\indexentry{RTF!braces { and } define groups|book{3}}{101}
\indexentry{RTF!objects, binary contents, hexdec chars, \object \objdata|book{3}}{101}
\indexentry{rtfdump.py|book{3}}{102}
\indexentry{rtfdump.py!embedded objects|book{3}}{102}
\indexentry{rtfdump.py!magic number|book{3}}{102}
\indexentry{rtfdump.py!nested groups|book{3}}{102}
\indexentry{rtfdump.py!-O parameter show objects only|book{3}}{103}
\indexentry{rtfdump.py!-s parameter selects index|book{3}}{103}
\indexentry{rtfdump.py!-d parameter dump object|book{3}}{103}
\indexentry{rtfdump.py!> output to file|book{3}}{103}
\indexentry{rtfobj similar to rtfdump.py|book{3}}{103}
\indexentry{Equation Editor 3.0|book{3}}{104}
\indexentry{RTF! Equation Editor Exploit|book{3}}{104}
\indexentry{Vulnerability What Is|book{3}}{105}
\indexentry{Exploit What Is|book{3}}{105}
\indexentry{Payload What Is|book{3}}{105}
\indexentry{Shellcode What Is Machine CPU Code|book{3}}{105}
\indexentry{format-bytes.py|book{3}}{107}
\indexentry{format-bytes.py!-f parameter name-eqn1|book{3}}{107}
\indexentry{rtfdump.py!u= tag unknown chars|book{3}}{108}
\indexentry{rtfdump.py!Remainder Overlay content exist outside file|book{3}}{108}
\indexentry{rtfdump.py!h= tag hex chars|book{3}}{109}
\indexentry{rtfdump.py!90 Hex NOP Padding shellcode|book{3}}{109}
\indexentry{NOP Padding shellcode 909090 hex|book{3}}{109}
\indexentry{rtfdump.py!-H parameter convert its contents from hex|book{3}}{109}
\indexentry{xorsearch|book{3}}{111}
\indexentry{xorsearch search file string encoded|book{3}}{111}
\indexentry{xorsearch!-W parameter shellcode patterns|book{3}}{111}
\indexentry{xorsearch!-d 3 parameter avoid applying ROT transformation FPs|book{3}}{111}
\indexentry{shellcode!emulation example|book{3}}{111}
\indexentry{EIP Register stores address of instruction execute next|book{3}}{112}
\indexentry{GetEIP CALL saves EIP value to stack, POP EAX places stack value in EAX|book{3}}{112}
\indexentry{GetEIP CALL POP|book{3}}{112}
\indexentry{CALL E8 Instruction|book{3}}{112}
\indexentry{destination 00000000 offset jump 0 bytes|book{3}}{112}
\indexentry{shellcode!Invoke API Calls DLLs|book{3}}{113}
\indexentry{PEB Process Environment Block list of DLLs|book{3}}{113}
\indexentry{TIB Thread Information Block currently running thread|book{3}}{113}
\indexentry{FS Register address data structure TIB|book{3}}{113}
\indexentry{0x30 hex PEB FS:[0x30] list of loaded modules|book{3}}{113}
\indexentry{scdbgc!/foff 3B specify where shellcode starts|book{3}}{114}
\indexentry{open file handle scanning|book{3}}{114}
\indexentry{GetFileSize file handle scanning|book{3}}{114}
\indexentry{scdbgc!/fopen open handle to original RTF document|book{3}}{115}
\indexentry{scdbgc!/norw hide Read/Write events|book{3}}{115}
\indexentry{scdbgc!/norw hide Read/Write events|book{3}}{115}
\indexentry{runsc32 execute shellcode|book{3}}{116}
\indexentry{runsc64 execute shellcode|book{3}}{116}
\indexentry{WINWORD.EXE|book{3}}{117}
\indexentry{file see format of files|book{3}}{118}
\indexentry{cat examine contents of files|book{3}}{118}
\indexentry{rar x extract contents of compressed file|book{3}}{118}
\indexentry{XLM Macros|book{3}}{125}
\indexentry{XLM Macros!macro execution zipdump.py|book{3}}{126}
\indexentry{XLM Macros!macro execution xmldump.py|book{3}}{126}
\indexentry{XLM Macros!xl/workbook.xml sheets starting point|book{3}}{126}
\indexentry{XLM Macros!xl/_rels/workbook.xml.rels mapping ID and xml file sheets starting point|book{3}}{127}
\indexentry{XLSM Tags c - Cell|book{3}}{128}
\indexentry{XLSM Tags f - Formula|book{3}}{128}
\indexentry{xmldump.py!celltext|book{3}}{129}
\indexentry{XLM Function FORMULA.FILL places result into cell comma|book{3}}{129}
\indexentry{Concatenate & join cells together |book{3}}{129}
\indexentry{& = Concatenate join cells / chars together|book{3}}{129}
\indexentry{XLSM Reference|book{3}}{130}
\indexentry{XLSM Forumla|book{3}}{130}
\indexentry{XLM Macros!obfuscation techniques Value|book{3}}{131}
\indexentry{xmldump.py!grep -A2 two lines before and after|book{3}}{132}
\indexentry{xmldump.py!r=cell number reference cell number|book{3}}{132}
\indexentry{xmldump.py!t="s" string stored in table of shared strings|book{3}}{132}
\indexentry{xmldump.py!<v>17</v> 17th string xl/sharedStrings.xml|book{3}}{132}
\indexentry{XLM Macros!xl/sharedStrings.xml String Table Obfuscation|book{3}}{132}
\indexentry{zipdump.py -j parameter xmldump.py -j JSON format automatic analysis|book{3}}{134}
\indexentry{xmldump.py!|sort by name of order|book{3}}{137}
\indexentry{URLDownloadtoFileA Windows API call download file urlmon|book{3}}{138}
\indexentry{DownloadFile inseng.dll exports funtions lesser alternative|book{3}}{138}
\indexentry{DllRegisterServer run a Windows DLL|book{3}}{138}
\indexentry{AMSI Windows Antimalware Scan Interface examine scripts in Windows VBA XLM PS JS VBS|book{3}}{139}
\indexentry{AMSITrace logman start monitoring and save log file|book{3}}{140}
\indexentry{AMSITrace logman stop monitoring|book{3}}{140}
\indexentry{AMSIScriptContentRetrieval|book{3}}{140}
\indexentry{AMSITrace.etl log file|book{3}}{140}
\indexentry{AMSI Event logging on always Event viewer>ASL>Mic>Anti>Scan_Int|book{3}}{141}
\indexentry{oledump.py!plugin_biff -x locate and examine XLM Macro|book{3}}{142}
\indexentry{olevba!-decode automate|book{3}}{142}
\indexentry{XLMMacroDeobfuscator automated analysis|book{3}}{142}

\comment{********************************************************************************************
                                     FOURTH BOOK SECTION
*****************************************************************************************************}

\indexentry{JavaScript What are they|book{4}}{4}
\indexentry{js-beautify|book{4}}{5}
\indexentry{Obfuscation Techniques concealing encoded encrypted obfuscated|book{4}}{6}
\indexentry{eval deobfuscation process|book{4}}{6}
\indexentry{Browser-specific scripts|book{4}}{6}
\indexentry{document.write|book{4}}{6}
\indexentry{document.body.appendChild|book{4}}{6}
\indexentry{document.parentNode.insertBefore|book{4}}{6}
\indexentry{SpiderMonkey js Linux script interpreter|book{4}}{7}
\indexentry{Standalone Script Interpreter|book{4}}{7}
\indexentry{Standalone Script Interpreter!SpiderMonkey js|book{4}}{7}
\indexentry{CScript Windows script interpreter|book{4}}{7}
\indexentry{Standalone Script Interpreter!CScript|book{4}}{7}
\indexentry{extractscripts.py auto extract JS from webpages|book{4}}{7}
\indexentry{Javascript Deobfuscation rely on objects, methods, attributes|book{4}}{7}
\indexentry{/usr/share/remnux/objects.js|book{4}}{8}
\indexentry{objects.js|book{4}}{8}
\indexentry{object.js!eval|book{4}}{8}
\indexentry{object.js!href location|book{4}}{8}
\indexentry{object.js!document.write|book{4}}{8}
\indexentry{ActiveXObject interact with system components|book{4}}{9}
\indexentry{WScript.Shell implements Methods CreateShortcut|book{4}}{9}
\indexentry{Shell.Application ShellExecute|book{4}}{9}
\indexentry{AMSI Example|book{4}}{10-11}
\indexentry{function call interfere with debugging of script|book{4}}{11}
\indexentry{JScript Micsoroft version of CScript differences|book{4}}{11}
\indexentry{CScript advantage auto supply script OS objects|book{4}}{12}
\indexentry{CScript natively supports eval|book{4}}{12}
\indexentry{CScript uses WScript.Echo to display|book{4}}{12}
\indexentry{Script Deobfuscation specific value Objects.js file|book{4}}{15}
\indexentry{Metadata importance of saving headers, URLs, Last-Modified etc|book{4}}{15}
\indexentry{arguments.callee.toString()|book{4}}{18}
\indexentry{JavaScript Detection if modified|book{4}}{18}
\indexentry{Script Debuggers in Web Browser|book{4}}{18}
\indexentry{box.js automatically decode|book{4}}{18}
\indexentry{Packers!What is|book{4}}{22}
\indexentry{Packers!How it Works|book{4}}{22}
\indexentry{Packers!PE Header Values|book{4}}{24}
\indexentry{Packers!Sections|book{4}}{24}
\indexentry{Packers!Entry Point|book{4}}{24}
\indexentry{Packers!AddressOfEntryPoint|book{4}}{24}
\indexentry{Packers!UPX|book{4}}{25}
\indexentry{Packers!Armadillo|book{4}}{25}
\indexentry{Packers!FSG|book{4}}{25}
\indexentry{Packers!Themida|book{4}}{25}
\indexentry{Packers!Signs and how to identify them|book{4}}{26}
\indexentry{Packers!PeStudio|book{4}}{26}
\indexentry{Packers!Bytehist|book{4}}{26}
\indexentry{Packers!Detect It Easy|book{4}}{26}
\indexentry{Packers!Exeinfo PE|book{4}}{26}
\indexentry{Packers PeStudio|book{4}}{27}
\indexentry{Packers PeStudio!Section names different to nonpacked .txt .data .rdata|book{4}}{27}
\indexentry{Packers PeStudio!Entropy higher value more random contents|book{4}}{27}
\indexentry{Packers PeStudio!Raw size space section occupy file disk|book{4}}{27}
\indexentry{Packers PeStudio!Virtual size Memory windows allocate section malware exec|book{4}}{27}
\indexentry{Packers Bytehist|book{4}}{28}
\indexentry{Packers Bytehist!examine file byte value visual histogram|book{4}}{28}
\indexentry{Packers Bytehist!holes in them file is packed|book{4}}{28}
\indexentry{Packers Bytehist!top region bytes value 0 to FF X-axis|book{4}}{28}
\indexentry{Packers Bytehist!bottom region order of occurance Y-axis|book{4}}{28}
\indexentry{Packers Bytehist!Not Packed Less uniform byte values|book{4}}{28}
\indexentry{Packers Bytehist!Packed more uniform byte values book{4}}{28}
\indexentry{Packers DetectItEasy diec commandline|book{4}}{29}
\indexentry{Packers Exeinfo PE GUI flagged Tampered File|book{4}}{29}
\indexentry{UPX Packer|book{4}}{33}
\indexentry{UPX Packer!-d decompress|book{4}}{33}
\indexentry{UPX Packer!modified/hacked/protected mangled file prevent decompress|book{4}}{33}
\indexentry{Unpacker Tools Automatic|book{4}}{34}
\indexentry{Unpacker Tools Automatic!Ether|book{4}}{34}
\indexentry{Unpacker Tools Automatic!UnPacMe|book{4}}{34}
\indexentry{Unpacker Scripts x64dbg Repo specific versions of packers|book{4}}{34}
\indexentry{ASLR|book{4}}{35}
\indexentry{ASLR!ImageBase Field Virtual Memory Address executable perfer loaded|book{4}}{35}
\indexentry{ASLR!PE Header file relocation section translate mem addresses|book{4}}{35}
\indexentry{ASLR!Disable prior unpacking analyzing code level analysis|book{4}}{35}
\indexentry{ASLR!Disable per file basis|book{4}}{36}
\indexentry{ASLR!DllCharacteristics PE Header|book{4}}{36}
\indexentry{ASLR!rebasing|book{4}}{36}
\indexentry{ASLR!DynamicBase Flag|book{4}}{36}
\indexentry{CFF Explorer|book{4}}{36}
\indexentry{CFF Explorer!Nt Headers|book{4}}{36}
\indexentry{ASLR!setdllcharacteristics -d disable DynamicBase|book{4}}{36}
\indexentry{setdllcharacteristics -d|book{4}}{37}
\indexentry{Packed Executable|book{4}}{38}
\indexentry{Packed Executable!dumping process packed exe unpack in memory extraction|book{4}}{39}
\indexentry{Packed Executable!dumping file PE Header tweaked|book{4}}{39}
\indexentry{Packed Executable!Entry Point|book{4}}{39}
\indexentry{Packed Executable!OEP Original Entry Point|book{4}}{39}
\indexentry{OEP Original Entry Point|book{4}}{39}
\indexentry{Packed Executable!Import Address Table IAT|book{4}}{39}
\indexentry{Unpacker Tools|book{4}}{39}
\indexentry{Unpacker Tools!Scylla fixes PE Header rebuilding IAT|book{4}}{39-40}
\indexentry{Unpacker Tools!PE Tools|book{4}}{39}
\indexentry{Unpacker Tools!Imports Fixer|book{4}}{39}
\indexentry{Scylla How to use |book{4}}{40}
\indexentry{PE Tools|book{4}}{39}
\indexentry{Debugger Process|book{4}}{46}
\indexentry{windbg!Disable DynamicBase before Debugging|book{4}}{47}
\indexentry{UPX Unpacker Debugger OEP lots of zeros JMP is end|book{4}}{48}
\indexentry{windbg|book{4}}{48}
\indexentry{windbg!Breakpoint|book{4}}{49}
\indexentry{windbg!Step into|book{4}}{50}
\indexentry{windbg!Step over|book{4}}{50}
\indexentry{windbg!Unpacked Code String References|book{4}}{51-52}
\indexentry{windbg!Unpacked Code Intermodular Calls - API Calls|book{4}}{51-52}
\indexentry{String References|book{4}}{51-52}
\indexentry{Intermodular Calls - API Calls|book{4}}{51-52}
\indexentry{windbg!Unpacked Code Dump - CFF Explorer edit Entry Point PE Header|book{4}}{53}
\indexentry{windbg!Unpacked Code Dump - Scylla|book{4}}{53}
\indexentry{windbg!Unpacked Code Dump Plugin - OllyDumpEx|book{4}}{53}
\indexentry{OllyDumpEx|book{4}}{54}
\indexentry{OllyDumpEx!Get RIP as OEP 64bit|book{4}}{54}
\indexentry{OllyDumpEx!Get EIP as OEP 32bit|book{4}}{54}
\indexentry{OllyDumpEx!memory access violation error|book{4}}{55}
\indexentry{OllyDumpEx!MEM_WRITE Characteristics Flags|book{4}}{55}
\indexentry{windbg!Scylla Fix IAT Table AFTER OllyDumpEX Process - Fix Dump|book{4}}{58}
\indexentry{windbg!Set breakpoints in API Calls|book{4}}{63}
\indexentry{windbg!cleardb command clear all breakpoints|book{4}}{64}
\indexentry{windbg!database files c-progfiles-x64dbg-x64-db|book{4}}{64}
\indexentry{windbg!database files c-progfiles-x64dbg-x32-db|book{4}}{64}
\indexentry{windbg!Memory Map|book{4}}{65}
\indexentry{windbg!Memory Map E Flag - Execute code|book{4}}{65}
\indexentry{windbg!API Calls interactions with its environment DLLs|book{4}}{68}
\indexentry{windbg!hardware breakpoint likely to remain during runtime|book{4}}{69}
\indexentry{windbg!software breakpoint F2 Toggle can be ignored, modifying program|book{4}}{69}
\indexentry{Process Monitor!Process Tree|book{4}}{76}
\indexentry{wmiprvse.exe Windows Management Instrumentation WMI Commands|book{4}}{77}
\indexentry{mshta.exe Microsoft HTML Applications HTA files execute JS outside browser|book{4}}{77}
\indexentry{HKCU\Software\Classes Windows execute with specific file extension|book{4}}{7}
\indexentry{reg_export command line tool|book{4}}{86}
\indexentry{Registry Export Powershell Command|book{4}}{86}
\indexentry{SSH Daemon sshd start transfer files between VMs|book{4}}{87}
\indexentry{WinSCP Windows Tools transfer files between VMs|book{4}}{87}
\indexentry{Transfer Files between Virtual Machines|book{4}}{87}
\indexentry{SpiderMonkey js -f command |book{4}}{88}
\indexentry{xxd hex editor tool|book{4}}{88}
\indexentry{cat read contents of file|book{4}}{88}
\indexentry{tr -d delete null characters -d delete specific characters |book{4}}{88}
\indexentry{js-beautify|book{4}}{88}
\indexentry{base64dump.py -s select ID -d Dump contents to file|book{4}}{90}
\indexentry{sc32 long series hexdec shellcode|book{4}}{92}
\indexentry{Shellcode sc32|book{4}}{92}
\indexentry{VirtualAlloc allocate new memory for shellcode|book{4}}{92}
\indexentry{PAGE_EXECUTE_READWRITE VirtualAlloc 0x40|book{4}}{92}
\indexentry{VirtualAlloc 0x40 PAGE_EXECURE READWRITE|book{4}}{92}
\indexentry{Varible pr saving pointer to new memory segment|book{4}}{92}
\indexentry{CreateThread creates CPU thread and launches variable shellcode|book{4}}{92}
\indexentry{memset copies contents of shellcode to memory|book{4}}{92}
\indexentry{PowerShell Integrated Scripting Environment ISE|book{4}}{93}
\indexentry{0x values end of ShellCode|book{4}}{93}
\indexentry{ShellCode end of values 0x|book{4}}{93}
\indexentry{PowerShell ISE|book{4}}{93}
\indexentry{PowerShell ISE!Toggle Breakpoint F9|book{4}}{95}
\indexentry{PowerShell ISE!.ps1 file extension|book{4}}{95}
\indexentry{PowerShell ISE!decode and save BIN file|book{4}}{96}
\indexentry{scdbg Debug Shell|book{4}}{99}
\indexentry{scdbg Debug Shell!.poke specify place bytes worth of data|book{4}}{100}
\indexentry{scdbg Debug Shell!k command show current state of stack|book{4}}{100}
\indexentry{scdbg Debug Shell!g command emulate exec of shellcode|book{4}}{100}
\indexentry{runsc32 -f run file|book{4}}{101}
\indexentry{runsc32 attach file|book{4}}{102}
\indexentry{windbg!SetBPX advapi32.RegOpenKeyExA|book{4}}{106}
\indexentry{windbg!Call Stack|book{4}}{108}
\indexentry{windbg!Follow To|book{4}}{108}
\indexentry{VirtualAlloc|book{4}}{111}
\indexentry{VirtualAlloc Definition reserves commits changes state|book{4}}{111}
\indexentry{VirtualAlloc!memory allocated auto init zero|book{4}}{111}
\indexentry{VirtualAlloc!Malware unpacking calling function extract memory|book{4}}{111}
\indexentry{VirtualAllocEx allocate mem inside process inject code or data|book{4}}{111}
\indexentry{windbg!Execute till return|book{4}}{113}
\indexentry{windbg!EAX register contain VirtualAlloc Unpacked Code Dump|book{4}}{114}
\indexentry{Code Injection Techniques and Why|book{4}}{126}
\indexentry{Windows API Calls|book{4}}{127}
\indexentry{Windows API Calls!CreateToolHelp32Snapshot get listing of running processes|book{4}}{127}
\indexentry{Windows API Calls!ProcessFirst|book{4}}{127}
\indexentry{Windows API Calls!ProcessNext|book{4}}{127}
\indexentry{Windows API Calls!EnumProcess|book{4}}{127}
\indexentry{Windows API Calls!OpenProcess|book{4}}{127}
\indexentry{Windows API Calls!VirtualAllocEx|book{4}}{127}
\indexentry{Windows API Calls!WriteProcessMemory|book{4}}{127}
\indexentry{Windows API Calls!CreateRemoteThread|book{4}}{127}
\indexentry{Windows API Calls!LoadLibrary|book{4}}{127}
\indexentry{Native API Calls|book{4}}{128}
\indexentry{Native API Calls!NtQuerySystemInformation|book{4}}{128}
\indexentry{Native API Calls!NtopenProcess/ZwOpenProcess|book{4}}{128}
\indexentry{Native API Calls!NtAllocateVirtualMemory/ZwAllocateVirtualMemory|book{4}}{128}
\indexentry{Native API Calls!NtWriteVirtualMemory/ZwWriteVirtualMemory|book{4}}{128}
\indexentry{Native API Calls!NtCreateThreadEx/ZwCreateThreadEx|book{4}}{128}
\indexentry{Native API Calls!RtlCreateUserThread|book{4}}{128}
\indexentry{lpStartAddress address of function target process run new thread|book{4}}{132}
\indexentry{hProcess parameter handle points process program create new thread|book{4}}{132}
\indexentry{OpenProcess API Call obtains handle existing process PID|book{4}}{133}
\indexentry{0x40 VirtualAllocEx PAGE_EXECUTE_READWRITE|book{4}}{138}
\indexentry{LoadLibrary Malicious Process|book{4}}{142}
\indexentry{Hooking Definition and Process - Intercepting Exec compiled|book{4}}{143}
\indexentry{Hooking!Inline User-mode Definition patch target function memory|book{4}}{143}
\indexentry{Hooking!Call table hooks|book{4}}{143}
\indexentry{Hooking!Call table hooks IRP I/O Request Packet|book{4}}{143}
\indexentry{Hooking!Call table hooks IDT Interrupt Descriptor Table|book{4}}{143}
\indexentry{Hooking!Call table hooks SSDT System Service Descriptor Table|book{4}}{143}
\indexentry{Hooking!Call table hooks Import/Export Tables|book{4}}{143}
\indexentry{Hooking!Call table hooks vftable Virtual Function Table|book{4}}{143}
\indexentry{Hooking!GUI hooks|book{4}}{143}
\indexentry{Hooking!GUI hooks SetWindowsHookEx API Call|book{4}}{143}
\indexentry{Hooking!GUI hooks driver layering/filtering|book{4}}{143}
\indexentry{Hooking!GUI hooks minidrivers|book{4}}{143}
\indexentry{API Hooking Definition|book{4}}{146}
\indexentry{Hooking!API Calls ReadProcessMemory Read first bytes Trampoline|book{4}}{146}
\indexentry{Hooking!API Calls VirtualProtect modify permissions make writable|book{4}}{146}
\indexentry{Hooking!API Calls WriteProcessMemory JMP 0xE9 PUSH 0x68 RET 0xC3 JMP|book{4}}{146}
\indexentry{Handle -0x1 Special handle to read current process|book{4}}{148}


\comment{********************************************************************************************
                                     FIFTH BOOK SECTION
*****************************************************************************************************}


\indexentry{Anti-Debugger|book{5}}{6}
\indexentry{IsDebuggerPresent|book{5}}{6}
\indexentry{Windows API Calls!IsDebuggerPresent|book{5}}{6}
\indexentry{JNE is equivlant to JNZ|book{5}}{7}
\indexentry{Patching|book{5}}{9}
\indexentry{Patching!Change JNE with JE|book{5}}{9}
\indexentry{Patching!NOP instruction does nothing|book{5}}{9-10}
\indexentry{NOP instruction does nothing|book{5}}{9-10}
\indexentry{Register!Edit|book{5}}{9}
\indexentry{windbg!Save Patch|book{5}}{11}
\indexentry{Windows API Calls!CheckRemoteDebuggerPresent|book{5}}{12}
\indexentry{Windows API Calls!NtQueryInformationProcess|book{5}}{12}
\indexentry{Windows API Calls!ZwQueryInformationProcess|book{5}}{12}
\indexentry{Windows API Calls!OutputDebugString|book{5}}{12}
\indexentry{Windows API Calls!OutputDebugPresent|book{5}}{12}
\indexentry{Windows API Calls!|book{5}}{12}
\indexentry{BeingDebugged (flag)|book{5}}{12}
\indexentry{Process Environment Block (PEB)|book{5}}{12}
\indexentry{FS:[30h]|book{5}}{12}
\indexentry{NtGlobalFlag|book{5}}{13}
\indexentry{PEB NtGlobalFlag|book{5}}{13}
\indexentry{NtGlobalFlag!FLG_HEAP_ENABLE_TAIL_CHECK(0x10)|book{5}}{13}
\indexentry{NtGlobalFlag!FLG_HEAP_ENABLE_FREE_CHECK(0x20)|book{5}}{13}
\indexentry{NtGlobalFlag!FLG_HEAP_VALIDATE_PARAMETERS(0x40)|book{5}}{13}
\indexentry{API Call!GetTickCount|book{5}}{14}
\indexentry{API Call!GetLocalTime|book{5}}{14}
\indexentry{API Call!GetSystemTime|book{5}}{14}
\indexentry{API Call!NtQuerySystemTime|book{5}}{14}
\indexentry{RDTSC Read Time-Stamp Counter|book{5}}{14}
\indexentry{ScyllaHide|book{5}}{15}
\indexentry{Anti-Debugger!Countermeasure|book{5}}{15}
\indexentry{Anti-Debugger!Cloaking Capabilities|book{5}}{15}
\indexentry{Anti-Debugger!ScyllaHide|book{5}}{15}
\indexentry{WinDbg!ScyllaHide|book{5}}{15}
\indexentry{XORSearch|book{5}}{16-17}
\indexentry{XORSearch!How to use|book{5}}{17}
\indexentry{XORSearch!-i parameter case insensitive search|book{5}}{17}
\indexentry{XORSearch!-s parameter generate file decode bytes with key and alg|book{5}}{17}
\indexentry{brxor.py|book{5}}{18}
\indexentry{brutexor.py|book{5}}{18}
\indexentry{Balbuzard toolkit|book{5}}{18}
\indexentry{bbcrack.py auto identify patterns decode alg XOR ROL ADD crackguess|book{5}}{19}
\indexentry{Stack String \goto String,stack|comment}{0}
\indexentry{String!Stack|book{5}}{21}
\indexentry{String!Stack|book{5}}{21}
\indexentry{Stack String|book{5}}{21}
\indexentry{Ghidra!Convert|book{5}}{22}
\indexentry{Ghidra!Key binding|book{5}}{23}
\indexentry{strdeob.pl|book{5}}{23}
\indexentry{FLOSS|book{5}}{25}
\indexentry{FLOSS emulate execution deobf strings decode stack strings|book{5}}{25}
\indexentry{FLOSS!-no-static-strings parameter regular non-obf strings|book{5}}{26}
\indexentry{FLOSS!-x parameter address function handle deobf|book{5}}{26}
\indexentry{ScyllaHide|book{5}}{28}
\indexentry{exceptions error conditions code usually handle|book{5}}{29}
\indexentry{windbg!SetBPX RtlDecompressBuffer conceal the string|book{5}}{30}
\indexentry{windbg!Dump|book{5}}{31}
\indexentry{NtQueryInformationProcess|book{5}}{40}
\indexentry{Process hollowing|book{5}}{44}
\indexentry{capa!-vv parameter verbose|book{5}}{46}
\indexentry{capa!CreateProcess|book{5}}{46}
\indexentry{dwCreationFlags|book{5}}{49}
\indexentry{CREATE_SUSPENDED - dwCreationFlags|book{5}}{49}
\indexentry{Windows API Calls!VirtualAllocEx 0x40 flProtect P_E_RW|book{5}}{50}
\indexentry{VirtualAllocEx + WriteProcessMemory = Code Injection Pattern|book{5}}{50}
\indexentry{GetProcAddress!hModule, lpProcName|book{5}}{51}
\indexentry{Windows API Calls!GetProcAddress!hModule, lpProcName|book{5}}{51}
\indexentry{Windows API Calls!LoadLibraryW loads designated DLL|book{5}}{51}
\indexentry{Windows API Calls!CreateProcess|book{5}}{52}
\indexentry{Windows API Calls!NtUnmapViewofSection/ZwUnmapViewofSection|book{5}}{52}
\indexentry{Windows API Calls!VirtualAllocEx|book{5}}{52}
\indexentry{Windows API Calls!WriteProcessMemory|book{5}}{52}
\indexentry{Windows API Calls!ResumeThread|book{5}}{52}
\indexentry{Windows API Calls!GetThreadContext|book{5}}{52}
\indexentry{Windows API Calls!NtGetContextThread|book{5}}{52}
\indexentry{Windows API Calls!SetThreadContext|book{5}}{52}
\indexentry{Windows API Calls!NtSetThreadContext|book{5}}{52}
\indexentry{Process hollowing explaination|book{5}}{52}
\indexentry{Windows API Calls!WriteProcessMemory lpBuffer parameter|book{5}}{53}
\indexentry{ASLR!disable Dynamic base|book{5}}{54}
\indexentry{windbg!Dump lpBuffer|book{5}}{55}
\indexentry{windbg!Follow in Memory Map|book{5}}{56}
\indexentry{Process hollowing|book{5}}{59}
\indexentry{Sandbox detection|book{5}}{62}
\indexentry{Virtualization detection|book{5}}{63}
\indexentry{Sandbox detection|book{5}}{64}
\indexentry{Dyre|book{5}}{64}
\indexentry{Tinba|book{5}}{64}
\indexentry{Upatre|book{5}}{64}
\indexentry{Sandbox detection|book{5}}{65}
\indexentry{WH\_MOUSE\_LL 0x0E|book{5}}{68}
\indexentry{WM\_MOUSEMOVE 0x200|book{5}}{69}
\indexentry{WM\_LBUTTONDOWN 0x201|book{5}}{70}
\indexentry{WM\_LBUTTONUP 0x202|book{5}}{70}
\indexentry{BlockInput|book{5}}{74}
\indexentry{GetModuleHandle function to locate DLLs|book{5}}{76}
\indexentry{avghookx.dll|book{5}}{76}
\indexentry{OllyDbg|book{5}}{77}
\indexentry{FindWindow function|book{5}}{77}
\indexentry{Debugger!Detection|book{5}}{78}
\indexentry{KdDebuggerFlag|book{5}}{78}
\indexentry{Sandboxie|book{5}}{80}
\indexentry{WinDbg|book{5}}{80}
\indexentry{Avast Antivirus|book{5}}{80}
\indexentry{SysAnalyzer|book{5}}{80}
\indexentry{Windows Virtual PC|book{5}}{80}
\indexentry{WPE Pro|book{5}}{80}
\indexentry{ThreatAnalyzer|book{5}}{80}
\indexentry{Windows API Calls!CreateToolHelp32Snapshot|book{5}}{83}
\indexentry{Windows API Calls!Process32First|book{5}}{83}
\indexentry{Windows API Calls!Process32Next|book{5}}{83}
\indexentry{Sandbox detection|book{5}}{91}
\indexentry{Analysis detection|book{5}}{91}
\indexentry{Misdirection|book{5}}{95}
\indexentry{Exeinfo PE|book{5}}{95}
\indexentry{PECompact|book{5}}{95}
\indexentry{Structured Exception Handling (SEH)|book{5}}{97}
\indexentry{Structured Exception Handling (SEH)!Frame-Based|book{5}}{98}
\indexentry{Frame-Based Handling|book{5}}{98}
\indexentry{Structured Exception Handling (SEH)!SEH Chain|book{5}}{98}
\indexentry{FS:[0]|book{5}}{98}
\indexentry{Thread Information Block (TIB)|book{5}}{98}
\indexentry{windbg!SEH|book{5}}{99}
\indexentry{windbg!Ignore Exception|book{5}}{101}
\indexentry{Stack!Cleanup|book{5}}{104}
\indexentry{Entry Point!Original|book{5}}{104}
\indexentry{Breakpoint!Hardware|book{5}}{106}
\indexentry{OllyDumpEx API code strings|book{5}}{107}
\indexentry{Thread Local Storage (TLS)|book{5}}{114}
\indexentry{PeStudio!TLS|book{5}}{115}
\indexentry{Ghidra!TLS|book{5}}{116}
\indexentry{XOR Obfuscation|book{5}}{117}
\indexentry{Ghidra!Bad instruction|book{5}}{118}
\indexentry{windbg!TLS|book{5}}{119}
\indexentry{Breakpoint!hardware|book{5}}{121}
\indexentry{selector|book{5}}{126}
\indexentry{Global Descriptor Table (GDT)|book{5}}{126}
\indexentry{Misdirection|book{5}}{138}
\indexentry{NanoLocker|book{5}}{140}
\indexentry{Unpacking|book{5}}{144}
\indexentry{PEStudio!Imports risky DLLs LoadLibrary|book{5}}{145}
\indexentry{xAnalyzer Locals Tab|book{5}}{151}
\indexentry{windbg!xAnalyzer|book{5}}{151}
\indexentry{Variables and Arguments Local Tab|book{5}}{151}
\indexentry{Breakpoint!VirtualProtect|book{5}}{152}
\indexentry{Windows API Calls!VirtualProtect change permissions Injection/unpacking|book{5}}{152}
\indexentry{Memory BreakPoints|book{5}}{156}
\indexentry{Memory Protection|book{5}}{157}
\indexentry{Breakpoint!SingleShoot|book{5}}{159}
\indexentry{Page Memory Rights|book{5}}{161}
\indexentry{pe\_unmapper|book{5}}{162}
\indexentry{pe\_unmapper!/in parameter|book{5}}{162}
\indexentry{pe\_unmapper!/base parameter|book{5}}{162}
\indexentry{pe\_unmapper!/out parameter|book{5}}{162}
\indexentry{Import Address Table (IAT)|book{5}}{163}
\indexentry{Scylla!IAT|book{5}}{163}
\indexentry{TrickBot|book{5}}{164}

\comment{********************************************************************************************
                                     LAB BOOK SECTION
*****************************************************************************************************}

\comment{********************************************************************************************
                                      CROSS-KEYS SECTION
*****************************************************************************************************}
